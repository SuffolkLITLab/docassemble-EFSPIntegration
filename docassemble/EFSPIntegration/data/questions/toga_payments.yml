---
imports:
  - os
---
if: |
  new_account_type_code == 'WV'
need:
  - new_account_name
  - new_account_is_global
code: |
  # TODO: this isn't wired up yet!
  waiver_resp = proxy_conn.create_waiver_account(new_account_name, new_account_is_global)
  globals().pop('new_account_name', None)
  globals().pop('new_account_is_global', None)
---
if: new_account_type_code == 'WV'
need:
  - waiver_resp
question: |
  % if waiver_resp.is_ok():
  Waiver payment method created!
  % else:
  Something went wrong creating your Waiver payment method
  % endif
subquestion: |
  ${ debug_display(waiver_resp) }
continue button field: new_payment_account
---
if: |
  new_account_type_code in ['CC','BankAccount']
comment: |
  # Basis from https://stackoverflow.com/a/133997
  # TODO(brycew): just submit this + actual payment info to the Efile server as a POST,
  # Then hang on to that data with the transaction Id (created there), and send user to
  # the TOGA site, and it replies back to the proxy, which forwards back to the DA interview
  #      '  <input type="text" name="RequestXML" value="' + data +  '" style="display:none;"/> ' +
  #      ' <button>Click here if not working</button> </input>' +
question: |
  New payment method
# TODO: using url_args this way means you can only create one
# payment method per session!
subquestion: |
  % if defined('creation_status'):
  % if creation_status == 'success':
  You've created your new payment method (${new_account_name})!
  % endif
  % if creation_status == 'failure':
  An error has occured. Please try again.
  % endif
  % else:
  <i class="fas fa-cog fa-spin"></i>Sending you to a secure payments site . . .<i class="fas fa-cog fa-spin"></i>
  % endif
script: |
  % if not defined('creation_status'):
  <script>
      //data = '<PaymentRequest></PaymentRequest>'; 
      
      const form = document.createElement('form');
      form.method = 'post';
      //form.target = '_blank';
      form.action = '${ proxy_conn.full_url('payments/new-toga-account') }';

      const nameField = document.createElement('input');
      nameField.type = 'hidden';
      nameField.name = 'account_name';
      nameField.value = '${ new_account_name }';
      form.appendChild(nameField);
      const isglobal = document.createElement('input');
      isglobal.type = 'hidden';
      isglobal.name = 'global';
      isglobal.value = ${ 'true' if new_account_is_global == 'on' else 'false'};
      form.appendChild(isglobal);
      const typeCode = document.createElement('input');
      typeCode.type = 'hidden';
      typeCode.name = 'type_code';
      typeCode.value = '${ new_account_type_code }';
      form.appendChild(typeCode);
      // TODO(brycew): HACKY: how to propery add Headers here?
      const tylerInfo = document.createElement('input');
      tylerInfo.type = 'hidden';
      tylerInfo.name = 'tyler_info';
      tylerInfo.value = '${ proxy_conn.tyler_token() }';
      form.appendChild(tylerInfo);
      const url = document.createElement('input');
      url.type = 'hidden';
      url.name = 'original_url';
      url.value = '${ interview_url_action('completed_payment_account', creation_status='success') }';
      form.appendChild(url);
      const errorUrl = document.createElement('input');
      errorUrl.type = 'hidden';
      errorUrl.name = 'error_url';
      errorUrl.value = '${ interview_url_action('completed_payment_account', creation_status='failure') }';
      form.appendChild(errorUrl);
      document.body.appendChild(form);
      form.submit();
  </script>
  % endif
continue button field: new_payment_account
---
event: completed_payment_account
code: |
  if 'creation_status' in action_arguments():
    creation_status = action_argument('creation_status')
---
id: new payment method
question: |
  What type of payment method do you want to make?
subquestion: |
fields:
  - Global: new_account_is_global
    datatype: yesno
    default: False
    show if:
      code: |
        logged_in_user_is_global_admin
  - Name of payment method: new_account_name
  - Type: new_account_type_code
    datatype: radio
    choices:
      - Fee Waiver: WV
      - eCheck: BankAccount
      - Credit Card: CC
  - note: |
      On the next screen, you'll be sent to a secure payments site to enter your credit card information.
    show if:
      variable: new_account_type_code
      is: CC
  - note: |
      On the next screen, you'll be sent to a secure payments site to enter your bank information.
    show if:
      variable: new_account_type_code
      is: BankAccount
---
code: |
  if not logged_in_user_is_global_admin:
    new_account_is_global = False
---
code: |
  new_payment_account_url = url_ask([
      {'undefine': ['new_payment_account', 'creation_status', 'new_account_type_code', 'new_account_name']},
      {'recompute': ['new_payment_account']}
    ])
---
template: payment_template
subject: |
  Payment methods 
content: |
  ${ action_button_html(new_payment_account_url, label='New payment method', id_tag="new_payment_account") }

  % for elem in firm_admin_payment_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1]) }
  
  % endfor
---
template: global_admin_payment_template
subject: |
  Payment methods
content: |
  ${ action_button_html(new_payment_account_url, label='New payment method', id_tag='new_payment_account') }

  % for elem in global_admin_payment_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1], id_tag=elem[0]) }
  
  % endfor
---
if: len(proxy_conn.get_payment_account_list().data or []) > 0
id: payment method id
question: |
  Payment method id?
subquestion: |
  Enter a payment method GUID or select from existing
  payment method in your firm.
fields:
  - Payment method id: payment_account_id
    datatype: combobox
    code: |
      payment_account_labels(proxy_conn.get_payment_account_list())
---
depends on: payment_account_id
code: |
  payment_account_id_resp = proxy_conn.get_payment_account(payment_account_id)
---
depends on: global_payment_account_id
code: |
  global_account_id_resp = proxy_conn.get_global_payment_account(global_payment_account_id)
---
reconsider:
  - payment_account_id_resp
depends on:
  - payment_account_id
id: update payment method
question: |
  Update payment method
fields:
  - Payment method name: payment_account_name
    default: ${ payment_account_id_resp.data.get('accountName') if payment_account_id_resp.data else '' }
  - Active?: payment_account_active
    datatype: yesno
    default: ${ payment_account_id_resp.data.get('active',{}).get('value') if payment_account_id_resp.data else False}
---
reconsider:
  - global_account_id_resp
depends on:
  - global_payment_account_id
id: update payment method 
question: |
  Update global payment method
fields:
  - Payment method name: global_account_name
    default: ${ global_account_id_resp.data.get('accountName') if global_account_id_resp.data else '' }
  - Active?: global_account_active
    datatype: yesno
    default: ${ global_account_id_resp.data.get('active',{}).get('value') if global_account_id_resp.data else False}
---
id: global payment method id
question: |
  Global payment method id?
fields:
  - Global payment method id: global_payment_account_id
---
code: |
  service_contact_options = proxy_conn.get_service_contact_list().data or []
---
code: |
  firm_admin_payment_list = [ 
    ('get_payment_account_type_list', 'Get payment method type list'),
    ('get_payment_account', 'Get payment method'),
    ('update_payment_account', 'Update payment method'),
    ('remove_payment_account', 'Remove payment method'),
    ('get_global_payment_account_list', 'Get global payment method list'),
    ('get_global_payment_account', 'Get global payment method'),
  ]
---
code: |
  global_admin_payment_list = [
    *firm_admin_payment_list,
    ('update_global_payment_account', 'Update global payment method'),
    ('remove_global_payment_account', 'Remove global payment method'),
  ]
---
code: |
  resp = proxy_conn.get_payment_account_type_list()
  get_payment_account_type_list = True
---
code: |
  resp = proxy_conn.get_payment_account_list()
  get_payment_account_list = True
---
code: |
  resp = proxy_conn.get_payment_account(payment_account_id)
  del payment_account_id
  get_payment_account = True
---
code: |
  resp = proxy_conn.update_payment_account(payment_account_id, payment_account_name, payment_account_active)
  globals().pop('payment_account_id', None)
  globals().pop('payment_account_name', None)
  globals().pop('payment_account_active', None)
  update_payment_account = True
---
code: |
  resp = proxy_conn.remove_payment_account(payment_account_id)
  del payment_account_id
  remove_payment_account = True
---
code: |
  resp = proxy_conn.get_global_payment_account_list()
  get_global_payment_account_list = True
---
code: |
  resp = proxy_conn.get_global_payment_account(global_payment_account_id)
  del global_payment_account_id
  get_global_payment_account = True
---
code: |
  resp = proxy_conn.update_global_payment_account(global_payment_account_id, global_account_name, global_account_active)
  del global_payment_account_id
  update_global_payment_account = True
---
code: |
  resp = proxy_conn.remove_global_payment_account(global_payment_account_id)
  del global_payment_account_id
  remove_global_payment_account = True
---
code: |
  def payment_list_table(payment_list_resp):
      ret = f'<span>{action_button_html(new_payment_account_url, label="Add a new payment method", icon="plus-circle", color="primary", size="md")}</span>'
      if not payment_list_resp.data:
          return ret + "\n<div>You don't currently have any payment methods. Add some using above button.</div>"
      ret += f"""
      <div class="table-responsive">
      <table class="table table-striped">
        <thead>
          <th scope="col">
            {word("Payment name")}
          </th>
          <th scope="col">{word("Payment type")}</th>
          <th scope="col">{word("Expiration date")}</th>
          <th scope="col">{word("Active")}</th>
          <th scope="col"></th>
          <th scope="col"></th>
        </thead>
        <tbody>
        """
      for payment in payment_list_resp.data:
          acc_id = payment.get("paymentAccountID")
          ret += f'<tr><td class="text-break">{payment.get("accountName")}</td>'
          ret += f'<td>{_payment_type(payment)}</td>'
          ret += f'<td>{_payment_expiration(payment)}</td>'
          ret += f'<td>{(payment.get("active") or {}).get("value", False)}</td>'
          edit_qs = [
              {"set": [{"payment_account_id": acc_id}]},
              {"recompute": ["payment_account_name", "payment_account_edit"]}
          ]
          ret += f'<td>{action_button_html(url_ask(edit_qs), label="Edit", color="info", icon="pencil")}</td>'
          rm_qs = [
              {"set": [{"payment_account_id": acc_id}]},
              "are_you_sure_remove",
              {"action": "payment_account_remove", "arguments": {"account_id": acc_id}}
          ]
          ret += f'<td>{action_button_html(url_ask(rm_qs), label="Remove", color="danger", icon="trash")}</td></tr>'
      ret += "</tbody></table></div>"
      return ret
---
event: payment_account_remove
code: |
  rm_payment_account_resp = proxy_conn.remove_payment_account(action_argument('account_id'))
  if rm_payment_account_resp.is_ok():
    log("Removed payment method", "success")
  else:
    log(f"Wasn't able to remove payment method: {rm_payment_account_resp}")
    log("Wasn't able to remove payment method", "error")
---
question: Are you sure you want to remove your ${ _payment_labels(proxy_conn.get_payment_account(payment_account_id).data) }?
subquestion: |
  You won't be able to get it back, and will have to enter all of it's details again.
continue button field: are_you_sure_remove
---
code: |
  payment_account_name
  payment_account_active
  log(f"payment_account_id: {payment_account_id}, {payment_account_name}, {payment_account_active}")
  updated_payment_account_resp = proxy_conn.update_payment_account(payment_account_id, payment_account_name, payment_account_active)
  log(updated_payment_account_resp)
  if updated_payment_account_resp.is_ok():
    log("Updated payment method", "success")
  else:
    log(f"Wasn't able to update payment method: {update_payment_account_resp}")
    log("Wasn't able to update payment method", "error")
  payment_account_edit = True
---
template: payment_template
subject: |
  Payment methods
content: |
  ${ payment_list_table(proxy_conn.get_payment_account_list()) }
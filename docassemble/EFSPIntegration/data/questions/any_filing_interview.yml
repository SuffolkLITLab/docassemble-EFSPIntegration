---
modules:
  - .efm_client
---
include:
  - login_qs.yml
  - efiling_integration.yml
  - docassemble.AssemblyLine:al_package.yml
  - case_search.yml
---
code: |
  proxy_conn = ProxyConnection()
---
objects:
  - users: ALPeopleList.using(there_are_any=is_initial_filing or is_adding_new_parties)
  - other_parties: ALPeopleList.using(there_are_any=is_initial_filing or is_adding_new_parties)
---
objects:
  - lead_doc: ALExhibitDocument.using(title="Lead Filing Doc", filename="lead_filing_doc")
---
objects:
  - service_contacts: DAList.using(object_type=DAObject)
---
objects:
  - cross_references: DADict.using(there_are_any=len(cross_ref_types))
---
code: |
  lead_doc.enabled = True
---
objects:
  - lead_doc.optional_services: DAList.using(object_type=DAObject)
---
objects:
  - al_court_bundle: ALDocumentBundle.using(elements=[lead_doc], filename="full_bundle.pdf", title="All forms to submit to the court")
---
code: |
  if is_initial_filing:
    al_form_type = 'starts_case'
  else:
    al_form_type = 'existing_case'
---
mandatory: True
code: |
  welcome
  tyler_login
  trial_court
  can_check_efile
  if is_initial_filing:
    tyler_case_category = case_category_map.get(case_category,{}).get('name')
    tyler_case_type = case_type_map.get(case_type,{}).get('name')
    if case_subtype_options:
      tyler_case_subtype = case_subtype_map.get(case_subtype).get('name')
    tyler_filing_attorney
    tyler_payment_id
    user_ask_role
    # TODO(brycew): add party type and other items in the complete attr block
    is_adding_new_parties = False
  else:
    interview_order_find_case
    load_existing_case_defaults
    previous_case_id = case_tracking_id
    user_started_case
    is_adding_new_parties

  users.gather(complete_attribute='complete')
  other_parties.gather(complete_attribute='complete')
  
  filing_description
  reference_number
  lead_doc.completed
  user_responsible_for_payment
  service_contacts.gather(complete_attribute='complete')
  cross_references.gather()
  al_court_bundle.as_pdf()
  
  if full_court_info.data['allowreturndate']:
    return_date
    show_allowed_return_date

  if can_check_efile:
    if is_initial_filing:
      users[0].email
    ready_to_efile

  show_disclaimers
  efile
  summary_page
  #submitted_page
---
generic object: ALIndividual
code: |
  str(x.name)
  x.party_type = party_type_map.get(x.party_type_code).get('name')
  x.complete = True
---
code: |
  return_date = proxy_conn.get_return_date(court_id, user_return_date, al_court_bundle)
---
generic object: ALDocument
code: |
  x.optional_services.gather(complete_attribute='complete')
  x.filing_type
  x.tyler_filing_type = filing_type_map.get(x.filing_type,{}).get('name')
  x.document_type = x.document_type_map.get(x.document_type_code,{}).get('name')
  x.filing_component = x.filing_component_map.get(x.filing_component_code,{}).get('name')
  x.as_pdf()
  x.completed =True
---
continue button field: DEBUG_trial_court
question: |
  ${ proxy_conn.get_courts() }
---
question: |
  Are you adding any additional parties to this filing?
yesno: is_adding_new_parties
---
question: |
  Make a Filing
subquestion: |
  Welcome! You can make any type of filing in an Illinois court, to a pre-existing or new case, in this interview.
continue button field: welcome
---
question: |
  You can use this return date. Is this okay?
subquestion: |
  ${ return_date }
continue button field: show_allowed_return_date
---
code: |
  resp = proxy_conn.authenticate_user(tyler_email=my_username, tyler_password=my_password)
  del my_password
  tyler_login = True
---
question: |
  Is this an initial filing?
yesno: is_initial_filing
---
code: |
  # NOTE we could refactor case_search.yml to use a datatype: object selector
  # but I think this essentially works the same in the background
  selected_existing_case = next(filter(lambda case: case.tracking_id == case_tracking_id, found_cases ),DAEmpty())
---
code: |
  if selected_existing_case:
    if selected_existing_case.category:
      case_category = selected_existing_case.category
    if selected_existing_case.case_type:
      case_type = selected_existing_case.case_type
  load_existing_case_defaults = True
---
question: | 
  Location?
fields:
  - Court Location: trial_court
    datatype: dropdown
    code: |
      trial_court_options
---
question: |
  Case Category
fields:
  - Case Category: case_category
    datatype: dropdown
    code: |
      sorted(case_category_options,key=lambda cat: cat[1])
---
question: |
  Case Type
fields:
  - Case Type: case_type
    datatype: dropdown
    code: |
      sorted(case_type_options,key=lambda cat: cat[1])
---
question: |
  Case Subtype
fields:
  - Case Subtype: case_subtype
    datatype: dropdown
    code: |
      sorted(case_subtype_options,key=lambda cat: cat[1])
---
question: |
  Filing Attorney
fields:
  - Filing Attorney: tyler_filing_attorney
    datatype: dropdown
    code: |
      tyler_filing_attorney_options
---
question: |
  Payment Account
fields:
  - Payment Account: tyler_payment_id
    datatype: dropdown
    code: |
      tyler_payment_account_options
---
generic object: ALDocument
question: |
  Filing Type
fields:
  - Filing Type: x.filing_type
    datatype: dropdown
    code: |
      filing_type_options
---
question: |
  Filing Description
fields: 
  - Filing Description: filing_description
    datatype: text
---
generic object: ALIndividual
question: |
  Party type of ${ x }?
fields:
  - Party Type: x.party_type_code
    input type: radio
    code: |
      party_type_options
---
code: |
  if showifdef('user_ask_role') == 'plaintiff' and matching_tuple_option('plaintiff', party_type_options):
    users[0].party_type_code = matching_tuple_option('plaintiff', party_type_options)
  elif matching_tuple_option('defendant', party_type_options):
    users[0].party_type_code =  matching_tuple_option('defendant', party_type_options)
---
question: |
  Party type of ${ users[i] }?
fields:
  - Party Type: users[i].party_type_code
    input type: radio
    code: |
      party_type_options
    default: ${ matching_tuple_option('plaintiff', party_type_options) if showifdef('user_ask_role') == 'plaintiff' else matching_tuple_option('defendant', party_type_options) }
---
question: |
  Party type of ${ other_parties[i] }?
fields:
  - Party Type: other_parties[i].party_type_code
    input type: radio
    code: |
      party_type_options
    default: ${ matching_tuple_option('defendant', party_type_options) if showifdef('user_ask_role') == 'plaintiff' else matching_tuple_option('plaintiff', party_type_options) }

---
code: |
  def matching_tuple_option(option:str, options:List[Tuple]):
    return next(filter(lambda type: option in type[1].lower(), options),[None])[0]
---
generic object: ALDocument
question: |
  Document Type
fields:
  - Document type: x.document_type_code
    datatype: dropdown
    code: |
      x.document_type_options
---
generic object: ALDocument
if: |
  not exactly_one_required_filing_component(x.filing_component_options, x.filing_component_map)
question: |
  Filing Component
fields:
  - Filing Component: x.filing_component_code
    datatype: dropdown
    code: |
      x.filing_component_options
---
generic object: ALDocument
if: |
  exactly_one_required_filing_component(x.filing_component_options, x.filing_component_map)
code: |
  x.filing_component_code = next(iter(x.filing_component_options))[0]
---
generic object: ALDocument
code: |
  def exactly_one_required_filing_component(fc_opts, fc_map):
    if len(fc_opts) > 1:
      return False
    filing_component_code = next(iter(fc_opts))[0]
    return fc_map.get(filing_component_code,{}).get('required')
---
question: |
  Disclaimers
subquestion: |
  % if not disclaimers:
  No Disclaimers!
  % else:
  %for dis in disclaimers: 
  
  * ${ dis.get('requirementText') }
  % endfor
  % endif
continue button field: show_disclaimers
---
question: |
  Reference number
subquestion: |
  Optional -- add a unique reference number to track this case in your own
  filing system.
fields:
  - Reference Number (optional): reference_number
    datatype: text
    required: False
---
question: |
  Return Date?
fields:
  - Return Date: user_return_date
    datatype: date
    min: ${ today() }
---
generic object: ALDocument
question: |
  Are there any optional services that you want?
yesno: x.optional_services.there_are_any
---
generic object: ALDocument
question: |
  Are there any other optional services that you want?
yesno: x.optional_services.there_is_another
---
generic object: ALDocument
code: |
  my_code = x.optional_services[i].code
  if x.optional_service_map.get(my_code,{}).get('multiplier'):
    x.optional_services[i].multiplier
  if x.optional_service_map.get(my_code,{}).get('hasfeeprompt'):
    x.optional_services[i].fee_amount
  x.optional_services[i].complete = True
---
generic object: ALDocument
question: |
  Optional Services Type ${ i }
fields:
  - Optional Services: x.optional_services[i].code
    datatype: dropdown
    code: |
      x.optional_service_options
---
generic object: ALDocument
question: |
  Optional Service ${ i } multiplier?
fields:
  - Multiplier: x.optional_services[i].multiplier
    datatype: integer
---
question: |
  What type of cross reference is this?
fields:
  - Type of Reference: cross_references.new_item_name
    datatype: dropdown
    code: |
      cross_ref_types
  - Reference text: cross_references.new_item_value
validation code: |
  regex_str = cross_ref_type_map[cross_references.new_item_name]['validationregex']
  if not re.search(regex_str, cross_references.new_item_value):
    validation_error(cross_ref_type_map[cross_references.new_item_name]['customvalidationfailuremessage'])
  
---
question: |
  Do you have any other types of cross references?
yesno: cross_references.there_is_another
---
generic object: ALDocument
question: |
  Optional Service ${ i } fee amount?
subquestion: |
  ${ x.optional_service_map.get(x.optional_services[i].code).get('feeprompttext') }
fields: 
  - Fee Amount: x.optional_services[i].fee_amount
    datatype: currency
---
question: |
  User responsible for payment
fields:
  - User for payment: user_responsible_for_payment
    datatype: dropdown
    code: |
      users
---
code: |
  service_contacts[i].contact_id
  service_contacts[i].service_type
  service_contacts[i].party_association
  service_contacts[i].complete = True
---
question: |
  Service Contact
fields: 
  - Contact Id: service_contacts[i].contact_id
    datatype: dropdown
    code: |
      service_contact_options
---
question: |
  Service Type
fields: 
  - Service Type: service_contacts[i].service_type
    datatype: dropdown
    code: | 
      service_type_options
---
question: |
  Service Party Association?
subquestion: |
  TODO(brycew): none for now
fields:
  - PartyAssociation: service_contacts[i].party_association
    datatype: text
---
question: |
  Any service contacts?
yesno: service_contacts.there_are_any
---
question: |
  Any more service contacts?
yesno: service_contacts.there_is_another
---
event: summary_page
question: |
  Your form is submitted!
#subquestion: |
#  % if ready_to_efile and not (defined('efile') and efile):
#  Click the "E-File" button below te e-file your form at ${ trial_court }.
#
#  ${ action_button_html(url_ask([{'recompute': ['efile']}]), label='E-file', icon='file-export')}
#  % endif
---
event: submitted_page
question: |
  Yay
---
event: go_back_screen
question: |
  Something went wrong
subquestion: |
  Your selections aren't working. :/  Please try again.
---
code: |
  trial_court_resp = proxy_conn.get_courts(filable_only=True)
  log(trial_court_resp)
  trial_court_options = trial_court_resp.data
---
code: |
  full_court_info = proxy_conn.get_court(court_id)
---
code: |
  case_category_options, case_category_map = choices_and_map(proxy_conn.get_case_categories(court_id, filable_only=True).data)
  if not case_category_options:
    go_back_screen
---
code: |
  case_type_options, case_type_map = choices_and_map(proxy_conn.get_case_types(court_id, case_category, timing='Initial' if is_initial_filing else 'Subsequent').data)
  if not case_type_options:
    go_back_screen
---
code: |
  case_subtype_options, case_subtype_map = choices_and_map(proxy_conn.get_case_subtypes(court_id, case_type).data)
---
code: |
  tyler_filing_attorney_options, tyler_filing_attorney_map = choices_and_map(proxy_conn.get_attorney_list().data, 
      display='{firstName} {middleName} {lastName}',
      backing='attorneyID')
---
code: |
  tyler_payment_account_options = list(map(lambda vv: (vv.get('paymentAccountID'), vv.get('accountName')), proxy_conn.get_payment_account_list().data))
---
code: |
  disclaimers = proxy_conn.get_disclaimers(court_id).data
---
code: |
  filing_type_options, filing_type_map = choices_and_map(proxy_conn.get_filing_types(court_id, case_category, case_type, is_initial_filing).data)
---
code: |
  party_type_options, party_type_map = \
    choices_and_map(proxy_conn.get_party_types(court_id, case_type).data)
  if any(map(lambda vv: vv.get('isrequired'), party_type_map.values())):
    party_type_options = list(filter(lambda vv: party_type_map.get(vv[0]).get('isrequired'), party_type_options))
---
generic object: ALDocument
code: |
  raw_opt_servs = proxy_conn.get_optional_services(court_id, x.filing_type).data
  x.optional_service_options, x.optional_service_map = choices_and_map(raw_opt_servs)
---
generic object: ALDocument
code: |
  raw_components = proxy_conn.get_filing_components(court_id, x.filing_type)
  log('raw_components: ' + str(raw_components))
  x.filing_component_options, x.filing_component_map = choices_and_map(raw_components.data)
  log('map: ' + str(x.filing_component_map))
---
generic object: ALDocument
code: |
  x.document_type_options, x.document_type_map = choices_and_map(proxy_conn.get_document_types(court_id, x.filing_type).data)
---
code: |
  service_type_options, service_type_map = choices_and_map(proxy_conn.get_service_types(court_id).data)
  cross_ref_types, cross_ref_type_map = choices_and_map(proxy_conn.get_cross_references(court_id, case_type).data, backing='name')
---
code: |
  service_contact_options = list(map(lambda vv: (vv.get('serviceContactID'), f"{vv.get('firstName')} {vv.get('middleName')} {vv.get('lastName')}"), proxy_conn.get_service_contact_list().data))
---
comment: |
  service_information
  submitted_page

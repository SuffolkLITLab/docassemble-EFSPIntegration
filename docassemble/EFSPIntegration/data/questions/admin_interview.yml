---
modules:
  - .efm_client
---
include:
  - login_qs.yml
  - case_search.yml
---
objects:
  - person_to_reg: Individual
  - new_attorney: Individual
---
code: |
  user_admin_list = [
    ('tyler_login', 'Login'),
    ('self_change_password', 'Self Change Password'),
    ('rm_user', 'Remove user'),
    ('get_user_list', 'Get All Users'),
    ('get_user', 'Get User'),
    ('self_resend_activation', 'Resend Self Activation Email'),
    ('resend_activation', 'Resend Other Activation Email'),
  ]
  filing_admin_list = [
    ('get_courts', 'See all Courts'),
    ('get_filings', 'See Filings'),
    ('get_filing_status', 'Get filing Status'),
    ('get_filing', 'See Filing Info'),
    ('cancel_filing', 'Cancel Filing'),
    ('dummy_filing', 'Dummy File'),
    ('check_filing', 'Check filing'),
    ('get_firm', 'Get Firm'),
    ('update_firm', 'Update Firm'),
    ('get_attorney_list', 'Get All Attorneys'),
    ('get_attorney', 'Get Attorney'),
    ('update_attorney', 'Update Attorney'),
    ('remove_attorney', 'Remove Attorney'),
  ]
---
question: | 
  Admin Tasks
subquestion: |
  ## Login status
  Logged in: ${ tyler_login }

  ${ action_button_html(url_ask(
      [{'recompute': ['tyler_login','show_resp']}]),
      label="Login") }
  
  As ${ my_username }

  ${ action_button_html(url_ask(
      [{'recompute': ['get_firm','show_resp']}]),
      label="Get firm ID") }

  ## Code cache refresh

  Code cache refresh is initiated in the backend only.
  It takes ~ 20 minutes to fully refresh codes.

  ## Firm admin - Users
  Tests:

  * Create a new firm administrator of new firm
  * Attempt to create users with bad/missing info
  * Create additional users with approprate info
  * Change all info for user (email, first, middle last)
  * Attempt 6 bad logins to lock out user
  * User firm admin to elevate the new user to admin
  * Update firm details with new info
  * De-elevate the new user back to regular user
  * Use firm admin to remove user.
  * Merge existing user into firm, verify they're in List    
  
  ${ action_button_html(url_ask(
      [{'recompute': ['person_to_reg', 'register', 'show_resp']}]),
      label='Register') }

  % for elem in user_admin_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1]) }

  % endfor

  ## Firm admin - Cross Vendor Functionality
  
  * Login to EFSP with existing Tyler creds

  ${ action_button_html(url_ask(
      [{'recompute': ['tyler_login','show_resp']}]),
      label="Login") }
      
  ## Firm admin - Password

  * Update the password GUID to expire in 20 minutes from current time (zulu time).
  * From EFSP login page, as firm administrator initiate password reset.  

  ${ action_button_html(url_ask(
    [{'recompute': ['change_password', 'show_resp']}]),
    label='Change password') }
    
  ## Firm admin - Attorneys

  * Login as admin. Add several Attorneys
  * Attempt to create Attorney with bad info (password that fails security requirements?)
  * Change info for a selected attorney
  * Use firm admin and rm at attorney from the firm  

  ${ action_button_html(url_ask(
      [{'recompute': ['tyler_login','show_resp']}]),
      label="Login") }

  ## Firm admin - service contacts

  ${ action_button_html(url_ask(
    [{'recompute': ['get_service_contact_list', 'show_resp']}]),
    label='Get service contact list') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_service_contact', 'show_resp']}]),
    label='Get service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['create_service_contact', 'show_resp']}]),
    label='Create service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['update_service_contact', 'show_resp']}]),
    label='Update service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['remove_service_contact', 'show_resp']}]),
    label='Remove service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['attach_service_contact', 'show_resp']}]),
    label='Attach service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['detach_service_contact', 'show_resp']}]),
    label='Detach service contact') }
  
  ## Firm admin - payment accounts

  * Credit card
  * Waiver
  * eCheck

  ${ action_button_html(url_ask(
    [{'recompute': ['new_payment_account', 'show_resp']}]),
    label='New payment Account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_payment_account_type_list', 'show_resp']}]),
    label='Get payment account type list') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_payment_account_list', 'show_resp']}]),
    label='Get payment account list') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_payment_account', 'show_resp']}]),
    label='Get payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['update_payment_account', 'show_resp']}]),
    label='Update payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['remove_payment_account', 'show_resp']}]),
    label='Remove payment account') }
  ${ action_button_html(url_ask(
    [{'recompute': ['get_global_payment_account_list', 'show_resp']}]),
    label='Get global payment account list') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_global_payment_account', 'show_resp']}]),
    label='Get global payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['update_global_payment_account', 'show_resp']}]),
    label='Update global payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['remove_global_payment_account', 'show_resp']}]),
    label='Remove global payment account') }
  
  ## User management

  * Change / reset password
  * Update user
  
  ## Initial filing

  * Login as Pro Se, create initial filing with credit card
  * Continue preparing. Attach documents
  * Submit Filing for clerk review
  * Accept envelope
  * Repeat as: waiver account; e-check
  * Repeat as: firm user: credit card, waiver, e-check

  ${ interview_url(i=user_info().package + "any_filing_interview.yml") }
  
  ## EFSP Cases
  
  * EFSP Cases - Case Search - Integrated CMS
  * EFSP Case - Broken Integration
  * EFSP Case - Secure Case
  * EFSP Cases - Case Search - Non Integrated CMS

  ${ action_button_html(url_ask(
    [{'recompute': ['interview_order_find_case', 'display_case']}]),
    label="Find a case") }
  
  ## Subsequent filing

  * Subsequent Filing - Firm User
  * Subsequent Filing - Pro Se Filer
  * Subsequent Filing - Business Origination
  * Subsequent Filing - Add/Remove Case Party & Attorney
  * Subsequest Filing - Add Service and Multiple Service contacts to an existing case
  * Subsequent Filing - Add/Remove Service Contact to case party
  
  ## Firm admin - eService
  
  * eService

  ## Mail service

  * Not implementing
  
  ## ECF Filing

  * ECF Filing - Subsequent Filing into Non-indexed case
  * ECF Filing - Filing with Courtesy Copies
  * ECF Service - Access E-Service SMTP Logs
  * ECF Service - Notification of Service
  * ECF Service - Access Service Information History
  * ECF Service - Access List of Attached Cases  

  ## User admin notification preferences

  * User Admin - Notification - Manage Prefernces
  
  ## EFSP admin global payment account
  
  * EFSP Admin - Global Payment Account

  ## Court scheduling

  * Court Scheduling - Receive Return Date
  * Court Scheduling - Reserving a Hearing Date

  ## Filing

  % for elem in filing_admin_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1]) }
  
  % endfor






continue button field: all_done
---
question: |
  Self email?
fields:
  - email: email
---
generic object: Individual
question: |
  Name?
fields:
  - First Name: x.name.first
  - Middle Name: x.name.middle
  - Last Name: x.name.last
---
generic object: Individual
question: |
  Address?
fields:
  - Street: x.address.address
    address autocomplete: True
  - Unit: x.address.unit
  - City: x.address.city
  - State: x.address.state
  - Zip: x.address.zip
  - Country: x.address.country
---
generic object: Individual
question: |
  Contact Info?
fields:
  - Phone Number: x.mobile_number
  - email: x.email
    datatype: email
---
question: |
  Password?
fields:
  - Password: new_password
    datatype: password
---
question: |
  User ID?
fields:
  - User ID: user_id
---
question: |
  Court Id?
fields:
  - Court ID: court_id
    datatype: combobox
    code: |
      proxy_conn.get_courts().data
---
event: query_variables
code: |
  variables_as_json()
---
question: |
  Filing id?
fields:
  - Filing id: filing_id
---
question: |
  Firm id?
fields:
  - Firm id: firm_id
---
question: |
  Attorney id?
fields:
  - Attorney id: attorney_id
---
question: |
  Current password?
fields:
  - Password: current_password
    datatype: password
---
question: |
  Payment account id?
fields:
  - Payment account id: payment_account_id
---
question: |
  Global payment account id?
fields:
  - Global payment account id: global_payment_account_id
---
question: |
  New password?
fields:
  - Password: new_user_password
    datatype: password      
---
question: |
  Service contact id?
fields:
  - Service contact id: service_contact_id

---
question: |
  Registration Type
fields:
  - Registration type: reg_type
    datatype: radio
    choices:
      - Pro se user: INDIVIDUAL
      - Firm administrator: FIRM_ADMINISTRATOR
      - Firm member: FIRM_ADMIN_NEW_MEMBER
  - note: |
      ---
  - Email address: person_to_reg.email
    datatype: email
  - Password: new_password
    datatype: password
    
  - Phone number: person_to_reg.phone_number
    required: False    
  - First name: person_to_reg.name.first
  - Middle name: person_to_reg.name.middle
    required: False
  - Last name: person_to_reg.name.last
  - note: |
      ---
  - Street address: person_to_reg.address.address
    required: False
  - Unit: person_to_reg.address.unit
    required: False
  - City: person_to_reg.address.city
  - State: person_to_reg.address.state
    code: states_list()
    default: IL
  - Zip: person_to_reg.address.zip
  - Country: person_to_reg.address.country
    code: countries_list()
    default: US
---
imports:
  - os
---
comment: |
  # Basis from https://stackoverflow.com/a/133997
  # TODO(brycew): just submit this + actual payment info to the Efile server as a POST,
  # Then hang on to that data with the transaction Id (created there), and send user to
  # the TOGA site, and it replies back to the proxy, which forwards back to the DA interview
  #      '  <input type="text" name="RequestXML" value="' + data +  '" style="display:none;"/> ' +
  #      ' <button>Click here if not working</button> </input>' +
question: |
  New payment account
subquestion: |
  <span id="inset_form"></span>
script: |
  <script>
      //data = '<PaymentRequest></PaymentRequest>'; 
      
      const form = document.createElement('form');
      form.method = 'post';
      //form.target = '_blank';
      form.action = '${ os.path.join(proxy_conn.base_url, 'payments/new-toga-account') }'; // 'https://togatest.tylerhost.net/EPayments/Webs/EPayment.aspx';
      
      const nameField = document.createElement('input');
      nameField.type = 'hidden';
      nameField.name = 'account_name';
      nameField.value = 'my_name';
      form.appendChild(nameField);
      const isglobal = document.createElement('input');
      isglobal.type = 'hidden';
      isglobal.name = 'global';
      isglobal.value = ${ 'true' if new_account_is_global == 'on' else 'false'}; 
      form.appendChild(isglobal);
      const typeCode = document.createElement('input');
      typeCode.type = 'hidden';
      typeCode.name = 'type_code';
      typeCode.value = '${ new_account_type_code }';
      form.appendChild(typeCode);
      // TODO(brycew): HACKY: how to propery add Headers here?
      const tylerInfo = document.createElement('input');
      tylerInfo.type = 'hidden';
      tylerInfo.name = 'tyler_info';
      tylerInfo.value = '${ proxy_conn.proxy_client.headers['TYLER-TOKEN'] }';
      form.appendChild(tylerInfo);
      const url = document.createElement('input');
      url.type = 'hidden';
      url.name = 'original_url';
      url.value = '${ interview_url(temporary=1) }';
      form.appendChild(url);
      document.body.appendChild(form);
      form.submit();
  </script>
continue button field: new_payment_account
---
question: |
  New payment account info
fields:
  - Global?: new_account_is_global
    datatype: yesno
  - TypeCode: new_account_type_code
    choices:
      - Waiver account: WV
      - eCheck: BankAccount
      - Credit Card: CC
---
code: |
  resp = proxy_conn.register_user(person_to_reg, registration_type=reg_type, password=new_password)
  del new_password, reg_type
  register = True
---
code: |
  resp = proxy_conn.remove_user(id=user_id) 
  del user_id
  rm_user = True
---
code : |
  resp = proxy_conn.get_user_list()
  get_user_list = True
---
code: |
  resp = proxy_conn.get_user(id=user_id)
  del user_id
  get_user = True
---
code: |
  resp = proxy_conn.get_courts()
  get_courts = True
---
code: |
  resp = proxy_conn.get_filing_list(court_id)
  del court_id
  get_filings = True
---
code: |
  resp = proxy_conn.self_resend_activation_email(email)
  del email
  self_resend_activation = True
---
code: |
  resp = proxy_conn.resend_activation_email(id=user_id)
  del user_id
  resend_activation = True
---
code: |
  resp = proxy_conn.get_filing_status(court_id, filing_id)
  del court_id
  del filing_id
  get_filing_status = True
---
code: |
  resp = proxy_conn.get_filing(court_id, filing_id)
  del court_id
  del filing_id
  get_filing = True
---
code: |
  # TODO(qs): requires a bundle
  resp = proxy_conn.file_for_review(court_id)
  del court_id
  dummy_filing = True
##################################
# Q Starting
---
code: |
  resp = proxy_conn.cancel_filing_status(court_id, filing_id)
  del court_id
  del filing_id
  cancel_filing = True
---
code: |
  # TODO(qs): requires a bundle
  resp = proxy_conn.check_filing(court_id, al_court_bundle)
  del court_id
  check_filing = True
---
# code: |
#   resp = proxy_conn.CancelFilingStatus(court_id, filing_id)
#   del court_id
#   del filing_id
#   cancel_filing = True
# ---
code: |
  resp = proxy_conn.get_firm()
  get_firm = True
---
code: |
  resp = proxy_conn.update_firm()
  update_firm = True
---
code: |
  resp = proxy_conn.get_attorney_list()
  get_attorney_list = True
---
code: |
  resp = proxy_conn.get_attorney(attorney_id)
  del attorney_id
  get_attorney = True
---
code: |
  resp = proxy_conn.create_attorney(new_attorney.bar_number,
    new_attorney.name.first, 
    middle_name=new_attorney.name.middle, 
    last_name=new_attorney.name.last)
  del new_attorney
  create_attorney = True  
---
code: |
  resp = proxy_conn.update_attorney(attorney_id,
    new_attorney.bar_number,
    new_attorney.name.first, 
    middle_name=new_attorney.name.middle, 
    last_name=new_attorney.name.last)
  del new_attorney
  del attorney_id
  update_attorney = True
---
code: |
  resp = proxy_conn.remove_attorney(attorney_id)
  del attorney_id
  remove_attorney = True
---
code: |
  resp = proxy_conn.get_payment_account_type_list()
  get_payment_account_type_list = True
---
code: |
  resp = proxy_conn.get_payment_account_list()
  get_payment_account_list = True
---
code: |
  resp = proxy_conn.get_payment_account(payment_account_id)
  del payment_account_id
  get_payment_account = True
---
code: |
  # TODO(qs): how does this interact with TOGA?
  resp = proxy_conn.update_payment_account(payment_account_id)
  del payment_account_id
  update_payment_account = True
---
# code: |
#   resp = proxy_conn.create_payment_account(firm_id)
#   del firm_id
#   create_payment_account = True
---
code: |
  resp = proxy_conn.remove_payment_account(payment_account_id)
  del payment_account_id
  remove_payment_account = True
---
code: |
  # TODO: not implemented anymore?
  resp = proxy_conn.get_vitalcheck_payment_account_id(firm_id)
  del firm_id
  get_vitalcheck_payment_account_id = True
---
code: |
  # TODO(qs): how does this interact with TOGA?
  resp = proxy_conn.create_inactive_payment_account()
  create_inactive_payment_account = True
---
code: |
  resp = proxy_conn.get_service_contact_list()
  get_service_contact_list = True
---
code: |
  # TODO: this method is for ServiceContact, but name is not specific
  resp = proxy_conn.get_public_list()
  get_public_list = True
---
code: |
  resp = proxy_conn.get_service_contact(service_contact_id)
  del service_contact_id
  get_service_contact = True
---
code: |
  resp = proxy_conn.create_service_contact(service_contact_id,
    {} # TODO(qs): add appropriate keys/values
    )
  del service_contact_id
  create_service_contact = True
---
code: |
  resp = proxy_conn.update_service_contact(service_contact_id,
    ) # TODO(qs): update efm_client w/ real parameters
  del service_contact_id
  update_service_contact = True  
---
code: |
  resp = proxy_conn.remove_service_contact(service_contact_id)
  del service_contact_id
  remove_service_contact = True
---
code: |
  resp = proxy_conn.attach_service_contact(service_contact_id)
  del service_contact_id
  attach_service_contact = True
---
code: |
  resp = proxy_conn.detach_service_contact(service_contact_id)
  del service_contact_id
  detach_service_contact = True
---
code: |
  resp = proxy_conn.get_global_payment_account_list()
  get_global_payment_account_list = True
---
code: |
  resp = proxy_conn.get_global_payment_account(global_payment_account_id)
  del global_payment_account_id
  get_global_payment_account = True
---
code: |
  # TODO(qs): this interacts with TOGA--not implemented
  resp = proxy_conn.update_global_payment_account(global_payment_account_id)
  del global_payment_account_id
  update_global_payment_account = True
---
code: |
  # TODO: how does this interact with TOGA?
  resp = proxy_conn.create_global_payment_account()
  create_global_payment_account = True
---
code: |
  resp = proxy_conn.remove_global_payment_account(global_payment_account_id)
  del global_payment_account_id
  remove_global_payment_account = True
---
code: |
  resp = proxy_conn.change_password(user_id, email, new_user_password)
  del user_id
  del new_user_password
  change_password = True
---
code: |
  resp = proxy_conn.self_change_password(current_password, new_user_password)
  del current_password, new_user_password
  self_change_password = True
---
code: |
  resp = proxy_conn.get_firm()
  get_firm = True
---
question: |
  show resp:
subquestion: |
  % if isinstance(resp.data, list):

  % for idx, elem in enumerate(resp.data):
  * idx: ${ idx }

    % if isinstance(elem, dict):
    % for k, inner_elem in elem.items():
      * ${ k }: ${ inner_elem }

    % endfor
    % else:
      * ${ elem }
    % endif

  % endfor

  % else:
  ${ resp }
  % endif
continue button field: show_resp
---
mandatory: True
code: |
  all_done
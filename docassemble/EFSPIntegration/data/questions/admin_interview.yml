---
modules:
  - .efm_client
  - .conversions
---
include:
  - login_qs.yml
  - case_search.yml
  - toga_payments.yml
  - docassemble.AssemblyLine:al_package.yml
---
features:
  question back button: True
  navigation back button: False
  custom datatypes to load:
    - ALVisiblePassword
---
default screen parts:
  back button label: |
    Back
---
metadata:
  title: |
    EFSP Admin Interface
---
code: |
  proxy_conn = ProxyConnection(credentials_code_block='tyler_login', default_jurisdiction=jurisdiction_id)
---
objects:
  - person_to_reg: ALIndividual
  - new_attorney: ALIndividual
  - updated_attorney: ALIndividual
  - updated_user: ALIndividual
  - updated_self: ALIndividual
  - new_firm: Person
  - updated_firm: Person
  - new_service_contact: ALIndividual
  - updated_service_contact: ALIndividual
---
objects:
  - case_search: EFCaseSearch
---
code: |
  can_check_efile = True
---
code: |
  case_search.court_id = court_id
---
code: |
  user_admin_list = [
    ('get_user', 'Get User'),
    ('self_resend_activation', 'Resend Self Activation Email'),
    ('resend_activation', 'Resend Other Activation Email'),
    ('get_user_list', 'Get All Users'),
    ('rm_user', 'Remove user'),
  ]
  firm_admin_list = [
    ('get_firm', 'Get Firm'),
    ('update_firm', 'Update Firm'),  
  ]
  
  filing_admin_list = [
    ('get_courts', 'See all Courts'),
    ('get_court','Get detailed court information'),
    ('get_policy', 'Get Court ECF Policies'),
    ('get_filings', 'See Filings'),
    ('get_filing_status', 'Get filing Status'),
    ('get_filing', 'See Filing Info'),
    ('cancel_filing', 'Cancel Filing'),
  ]

  firm_admin_attorneys_list = [
    ('create_attorney', 'Create attorney'),
    ('get_attorney_list', 'Get All Attorneys'),
    ('get_attorney', 'Get Attorney'),
    ('update_attorney', 'Update Attorney'),
    ('remove_attorney', 'Remove Attorney'),
  ]
  
  firm_admin_payment_list = [ 
    ('get_payment_account_type_list', 'Get Payment Method Type List'),
    ('get_payment_account', 'Get Payment Method'),
    ('update_payment_account', 'Update Payment Method'),
    ('remove_payment_account', 'Remove Payment Method'),
    ('get_global_payment_account_list', 'Get Global Payment Method List'),
    ('get_global_payment_account', 'Get Global Payment Method'),
  ]
  
  global_admin_payment_list = [
    *firm_admin_payment_list,
    ('update_global_payment_account', 'Update Global Payment Method'),
    ('remove_global_payment_account', 'Remove Global Payment Method'),
  ]
---
need:
  - tyler_login
  - logged_in_user_is_global_admin
id: Admin tasks
question: | 
  ${ 'Admin' if logged_in_user_is_admin else 'User' } Tasks
subquestion: |
  % if logged_in_user_is_global_admin and logged_in_user_is_admin:
  ${ tabbed_templates_html("Tests", login_status_template,
      code_cache_template,
      firm_admin_template,
      firm_admin_users_template,
      firm_admin_attorneys_template,
      firm_admin_service_contacts,
      global_admin_payment_template,
      make_filing_template,
      efsp_template,
      filings_template) }
  % elif not logged_in_user_is_global_admin and logged_in_user_is_admin:
    ${ tabbed_templates_html("Tests", login_status_template,
      code_cache_template,
      firm_admin_template,
      firm_admin_users_template,
      firm_admin_attorneys_template,
      firm_admin_service_contacts,
      payment_template,
      make_filing_template,
      efsp_template,
      filings_template) }
  % elif logged_in_user_is_global_admin and not logged_in_user_is_admin:
  ${ tabbed_templates_html("Tests", login_status_template,
      code_cache_template,
      global_admin_payment_template,
      make_filing_template,
      efsp_template,
      filings_template) }
  % else:
  ${ tabbed_templates_html("Tests", login_status_template, 
      firm_admin_service_contacts,
      payment_template,
      make_filing_template,
      efsp_template, 
      filings_template) }
  % endif
event: all_done
---
template: login_status_template
subject: Login
content: |
  Logged in: ${ tyler_login }

  ${ action_button_html(url_ask(
      [{'recompute': ['logout', 'tyler_login','show_resp']}]),
      label="Login") }
  
  As ${ my_username }
  
  ${ action_button_html(url_ask(
      [{'recompute': ['get_user_self', 'show_resp']}]),
      label="Get self") }
  
  ${ action_button_html(url_ask(
      [{'recompute': ['updated_user','self_update_user','show_resp']}]),
      label="Update self") }
  
  ${ action_button_html(url_ask(
      # self_change_password is mostly in login_qs
      [{'recompute': ['self_change_password', 'tyler_login']}]),
      label="Change your password") }

  ${ action_button_html(url_ask(
      [{'recompute': ['get_firm','show_resp']}]),
      label="Get firm") }
      
  ${ action_button_html(url_ask(
      [{'recompute': ['get_notification_preferences','show_resp']}]),
      label="Get notification preferences") }

   ${ action_button_html(url_ask(
      [{'recompute': ['update_notification_preferences','show_resp']}]),
      label="Update notification preferences") }
---
code: |
  tyler_header_name = f"TYLER-TOKEN-{jurisdiction_id.upper()}"
  da_store.delete("EFSP-" + tyler_header_name)
  logout = True
---
template: firm_admin_template
subject: |
  Firm
content: |
  % for elem in firm_admin_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1], id_tag=elem[0]) }

  % endfor
---
template: code_cache_template
subject: |
  Codes
content: |
  Code cache refresh is initiated in the backend only.
  It takes ~ 20 minutes to fully refresh codes.
  
  ${ action_button_html(url_ask(
    [{'recompute': ['get_datafield', 'show_resp']}]),
    label="Get datafield", id_tag='get_datafield') }
---
template: firm_admin_users_template
subject: |
  Users
content: |  
  Tests:

  * Create a new firm administrator of new firm
  * Attempt to create users with bad/missing info
  * Create additional users with approprate info
  * Change all info for user (email, first, middle last)
  * Attempt 6 bad logins to lock out user 
  * User firm admin to elevate the new user to admin
  * Update firm details with new info
  * De-elevate the new user back to regular user
  * Use firm admin to remove user
  * Merge existing user into firm, verify they're in List     
  
  ${ action_button_html(url_ask(
      [{'recompute': ['person_to_reg', 'register', 'show_resp']}]),
      label='Register') }

  % for elem in user_admin_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1], id_tag=elem[0]) }

  % endfor

  ${ action_button_html(url_ask(
      [{'recompute': ['user_id', 'get_user_roles', 'show_resp']}] ),
      label="Get user roles") }

  ${ action_button_html(url_ask(
      [{'recompute': ['user_id','updated_user', 'update_user', 'show_resp']}]),
      label="Update user") }

  ${ action_button_html(url_ask(
      [{'recompute': ['user_id', 
        'enable_role_filer', 
        'enable_role_admin',
        'new_user_roles', 
        'removed_user_roles',
        'update_user_roles', 
        'show_role_resp']}]),
      label="Update user role") }

  ${ action_button_html(url_ask(
    [{'recompute': ['change_password', 'show_resp']}]),
    label='Change password', id_tag='change_password') }
---
template: firm_admin_attorneys_template
subject: |
  Attorneys
content: |
  * Login as admin. Add several Attorneys
  * Attempt to create Attorney with bad info (e.g., invalid bar number?)
  * Change info for a selected attorney
  * Use firm admin and rm at attorney from the firm

  % for elem in firm_admin_attorneys_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1], id_tag=elem[0]) }
  
  % endfor
---
template: firm_admin_service_contacts
subject: |
  Service contacts
content: |
  * ECF Service - Access E-Service SMTP Logs
  * ECF Service - Notification of Service
  * ECF Service - Access Service Information History
  * ECF Service - Access List of Attached Cases

  ${ action_button_html(url_ask(
    [{'recompute': ['get_service_contact_list', 'show_resp']}]),
    label='Get service contact list') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_public_list', 'show_resp']}]),
    label='Get public service contact list') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_service_contact', 'show_resp']}]),
    label='Get service contact') }

  ${ action_button_html(url_ask(
    [{'undefine': ['new_service_contact']},{'recompute': ['create_service_contact', 'show_resp']}]),
    label='Create service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['update_service_contact', 'show_resp']}]),
    label='Update service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['remove_service_contact', 'show_resp']}]),
    label='Remove service contact', id_tag='remove_service_contact') }

  ${ action_button_html(url_ask(
    [{'undefine': [
      'do_what_choice',
      'case_search',
      'get_case_response',
    ]},
    {'recompute': ['case_search', 'case_search.case_was_found', 'attach_service_contact', 'show_resp']}]),
    label='Attach service contact', id_tag='attach_service_contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['detach_service_contact', 'show_resp']}]),
    label='Detach service contact', id_tag='detach_service_contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_attached_cases', 'show_resp']}]),
    label='View attached cases', id_tag='get_attached_cases') }
---
template: global_admin_payment_template
subject: |
  Payment methods
content: |
  ${ action_button_html(url_ask([
      {'undefine': ['new_payment_account', 'creation_status', 'new_account_type_code', 'new_account_name']},
      {'recompute': ['new_payment_account']}
    ]),
    label='New payment Method', id_tag='new_payment_account') }

  % for elem in global_admin_payment_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1], id_tag=elem[0]) }
  
  % endfor
---
template: make_filing_template
subject: |
  Make filing
content: |
  Make either an initial or subsequent filing

  ${ action_button_html(interview_url(i=user_info().package + ":any_filing_interview.yml",reset=1), label="Launch filing interview") }
---  
template: efsp_template
subject: |
  Case Search
content: |  
  * EFSP Cases - Case Search - Integrated CMS
  * EFSP Case - Broken Integration
  * EFSP Case - Secure Case
  * EFSP Cases - Case Search - Non Integrated CMS

  ${ action_button_html(url_ask(
    [{'undefine': [
      'trial_court',
      'court_id',
      'case_search',
      'get_case_response',
    ]},
    {'recompute': ['case_search', 'case_search.case_was_found', 'case_search.display_case', 'display_found_case']}]),
    label="Find a case", id_tag="find_a_case") }

  ${ action_button_html(url_ask(
    [{'undefine': [
      'case_search',
      'trial_court',
      'court_id', 
      'get_case_response',
    ]},
    {'recompute': ['case_search', 'case_search.case_was_found', 'get_service_information', 'show_resp']}]),
    label="Get case service information", id_tag="get_case_service_info") }
    
  ${ action_button_html(url_ask(
    [{'undefine': [
      'case_search',
      'trial_court',
      'court_id',
      'get_case_response',
    ]},
    {'recompute': ['case_search', 'case_search.case_was_found', 'get_service_information_history', 'show_resp']}]),
    label="Get case service history", id_tag="get_case_service_info_history") }
    
---
id: display case admin interview
question: |
  % if case_search.case_was_found:
  Your case
  % else:
  No case found
  % endif
subquestion: |
  % if case_search.cms_connection_issue:
  The court’s case management system isn’t online. The case information might be out of date.
  % endif
  
  % if case_search.case_was_found and case_search.found_case:
  ${ case_search.found_case.title } (${ case_search.found_case.tracking_id })
  % endif
continue button field: display_found_case
---
template: filings_template
subject: |
  Filings
content: |  
  % for elem in filing_admin_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1], id_tag=elem[0]) }
  
  % endfor
---
id: contact info
generic object: Individual
question: |
  Contact Info?
fields:
  - Phone Number: x.mobile_number
  - email: x.email
    datatype: email
---
id: password
question: |
  Password?
fields:
  - Password: new_password
    datatype: ALVisiblePassword
---
id: user id
question: |
  User ID?
subquestion: |
  Type in a user GUID or choose from members in your firm.
fields:
  - User ID: user_id
    datatype: combobox
    code: |
      user_list_choices()
---
id: admin trial court
question: |
  Which court?
fields:
  - Court Location: trial_court
    datatype: dropdown
    code: |
      trial_court_options
---
code: |
  court_id = convert_court_to_id(trial_court)
---
code: |
  trial_court_resp = proxy_conn.get_courts(fileable_only=True, with_names=True)
  trial_court_options = [(court['code'], court['name']) for court in trial_court_resp.data or []]
  trial_court_options.insert(0, ('0', 'All courts'))
---
event: query_variables
code: |
  variables_as_json()
---
id: filing id
question: |
  Filing id?
subquestion: |
  Select an option below. If none are available (no filings were found), you can type your own.
fields:
  - Filing id: filing_id
    datatype: combobox
    code: |
      [filing_id_and_label(y) for y in proxy_conn.get_filing_list(court_id, today().minus(years=1), today().plus(days=1) ).data or []]
---
id: filtering user id
question: |
  Filings by which user?
subquestion: |
  Select an option below. If none are available (no users were found), you can type your own.
fields:
  - User: filtering_user_id
    datatype: combobox
    code: |
      [{None: 'Any user (no filter)'}] + user_list_choices()
---
code: |
  def user_list_dict():
    """Returns a dict from user id to email"""
    return {y.get('userID'): y.get('email') for y in proxy_conn.get_user_list().data or []}
---
code: |
  def user_list_choices():
    """Returns individual choices of users, as a list of userID -> email dicts"""
    return [{y.get('userID'): y.get('email')} for y in proxy_conn.get_user_list().data or []]
---
id: firm id
question: |
  Firm id?
fields:
  - Firm id: firm_id
---
id: attorney id
question: |
  Attorney id?
subquestion: |
  Enter an attorney's GUID or select from attorneys in your firm.  
fields:
  - Attorney id: attorney_id
    datatype: combobox
    code: |
      [{y.get('attorneyID'): f"{y.get('firstName')} {y.get('lastName')}" } for y in proxy_conn.get_attorney_list().data or []]
---
id: payment method id
question: |
  Payment method id?
subquestion: |
  Enter a payment method GUID or select from existing
  payment method in your firm.
fields:
  - Payment method id: payment_account_id
    datatype: combobox
    code: |
      payment_account_labels(proxy_conn.get_payment_account_list())
---
depends on: payment_account_id
code: |
  payment_account_id_resp = proxy_conn.get_payment_account(payment_account_id)
---
depends on: global_payment_account_id
code: |
  global_account_id_resp = proxy_conn.get_global_payment_account(global_payment_account_id)
---
reconsider:
  - payment_account_id_resp
depends on:
  - payment_account_id
id: update payment method
question: |
  Update payment method
fields:
  - Payment method name: payment_account_name
    default: ${ payment_account_id_resp.data.get('accountName') if payment_account_id_resp.data else '' }
  - Active?: payment_account_active
    datatype: yesno
    default: ${ payment_account_id_resp.data.get('active',{}).get('value') if payment_account_id_resp.data else False}
---
reconsider:
  - global_account_id_resp
depends on:
  - global_payment_account_id
id: update global payment method
question: |
  Update global payment method
fields:
  - Payment method name: global_account_name
    default: ${ global_account_id_resp.data.get('accountName') if global_account_id_resp.data else '' }
  - Active?: global_account_active
    datatype: yesno
    default: ${ global_account_id_resp.data.get('active',{}).get('value') if global_account_id_resp.data else False}
---
id: global payment method id
question: |
  Global payment method id?
fields:
  - Global payment method id: global_payment_account_id
---
code: |
  service_contact_options = proxy_conn.get_service_contact_list().data or []
---
reconsider: service_contact_options
id: service contact id
question: |
  Service contact id?
subquestion: |
  % if service_contact_options:
  Type in the GUID of a service contact or select from 
  existing contacts in your firm.
  % else:
  You don't have any service contacts to select. Go back and create a new service contact.
  % endif
fields:
  - Service contact id: service_contact_id
    datatype: dropdown
    code: |
      [{contact.get('serviceContactID'): f"{contact.get('firstName')} {contact.get('lastName')} ({contact.get('email')})"} for contact in service_contact_options]
---
code: |
  valid_court_id_getter = lambda: convert_court_to_id(next(iter(trial_court_options))[0])
  attached_case_ids = proxy_conn.get_attached_cases(valid_court_id_getter(), service_contact_id).data or []
---
reconsider: attached_case_ids
id: tracking id
question: |
  % if attached_case_ids:
  Enter the case tracking ID
  % else:
  This service contact isn't attached to any cases. Choose a different contact.
  % endif
fields:
  - Case Tracking ID: attached_case_tracking_id
    datatype: dropdown 
    code: |
      [(y['value']['caseTrackingID']['value'], y['value']['caseTitleText']['value']) for y in attached_case_ids] 
---
id: update user information
question: |
  Update user information
fields:
  - Email address: updated_user.email
    datatype: email
    default: ${ updated_user.default_email }
  - First name: updated_user.name.first
    default: ${ updated_user.default_first }
  - Middle name: updated_user.name.middle
    required: False
    default: ${ updated_user.default_middle }
  - Last name: updated_user.name.last
    default: ${ updated_user.default_last }
---
reconsider:
  - updated_self.default_email
id: update self information
question: |
  Update user information
fields:
  - Email address: updated_self.email
    datatype: email
    default: ${ updated_self.default_email }
  - First name: updated_self.name.first
    default: ${ updated_self.default_first }
  - Middle name: updated_self.name.middle
    required: False
    default: ${ updated_self.default_middle }
  - Last name: updated_self.name.last
    default: ${ updated_self.default_last }    
---
sets:
  - new_service_contact.name.first
  - new_service_contact.address.address  
id: create service contact
question: |
  Create a new service contact
fields:
  - code: |
      new_service_contact.name_fields(show_suffix=False)
  - code: |
      new_service_contact.address_fields(default_state="IL", show_country=True)
  - Email: new_service_contact.email
    datatype: email
  - Make this contact public (requires special permissions): new_service_contact.is_public
    datatype: yesno
  - Add to master list: new_service_contact.is_in_master_list
    datatype: yesno
    default: True
  - Admin copy (optional): new_service_contact.admin_copy
    required: False
---
id: create attorney
question: |
  Create attorney
subquestion: |
  Comment: Tyler validates the bar number, so you must use a real 
  number.
fields:
  - Bar number: new_attorney.bar_number
  - First name: new_attorney.name.first
  - Middle name: new_attorney.name.middle
    required: False
  - Last name: new_attorney.name.last
help: |
  Two real bar numbers belonging to staff at ILAO who agreed to let us
  use for testing purposes: 
  
  * 6290610
  * 6331982
  
---
id: update attorney
question: |
  Update attorney
fields:
  - Bar number: updated_attorney.bar_number
    default: ${ updated_attorney.default_bar_number }
  - First name: updated_attorney.name.first
    default: ${ updated_attorney.default_first }
  - Middle name: updated_attorney.name.middle
    required: False
    default: ${ updated_attorney.default_middle }
  - Last name: updated_attorney.name.last  
    default: ${ updated_attorney.default_last }
---
question: |
  Search dates
fields:
  - Start date: start_date
    datatype: date
    default: ${ today().minus(years=1).format("yyyy-MM-dd")}
    required: False
  - Before date: before_date
    datatype: date
    default: ${ today().plus(days=1).format("yyyy-MM-dd")}
    required: False
continue button field: ask_for_search_dates
---
code: |
  if reg_type == "FIRM_ADMINISTRATOR":
    resp = proxy_conn.register_user(person_to_reg, registration_type=reg_type, password=new_password, firm_name_or_id=person_to_reg.firm_name)
  else:
    resp = proxy_conn.register_user(person_to_reg, registration_type=reg_type, password=new_password)
  del new_password, reg_type
  register = True
---
depends on:
  - user_id
code: |
  user_resp = proxy_conn.get_user(id=user_id)  
  if user_resp.data:
    updated_user.default_first = user_resp.data.get('firstName','')
    updated_user.default_middle = user_resp.data.get('middleName','')
    updated_user.default_last = user_resp.data.get('lastName','')
    updated_user.default_email = user_resp.data.get('email','')
  else:
    updated_user.default_first = ''
    updated_user.default_middle = ''
    updated_user.default_last = ''
    updated_user.default_email = ''
---
code: |
  user_resp = proxy_conn.get_user()  # Get self
  if user_resp.data:
    updated_self.default_first = user_resp.data.get('firstName','')
    updated_self.default_middle = user_resp.data.get('middleName','')
    updated_self.default_last = user_resp.data.get('lastName','')
    updated_self.default_email = user_resp.data.get('email','')
  else:
    updated_self.default_first = ''
    updated_self.default_middle = ''
    updated_self.default_last = ''
    updated_self.default_email = ''
---
depends on: attorney_id
code: |
  atty_resp = proxy_conn.get_attorney(attorney_id)
  if atty_resp.data:
    updated_attorney.default_first = atty_resp.data.get('firstName','')
    updated_attorney.default_middle = atty_resp.data.get('middleName','')
    updated_attorney.default_last = atty_resp.data.get('lastName','')
    updated_attorney.default_bar_number = atty_resp.data.get('barNumber','')
  else:
    updated_attorney.default_first = ''
    updated_attorney.default_middle = ''
    updated_attorney.default_last = ''
    updated_attorney.default_bar_number = ''
---
code: |
  resp = proxy_conn.update_user(user_id, 
    email=updated_user.email,
    first_name=updated_user.name.first,
    last_name=updated_user.name.last,
    middle_name=updated_user.name.middle )
  globals().pop('user_id', None)
  globals().pop('updated_user', None)
  update_user = True
---
code: |
  resp = proxy_conn.self_update_user( 
    email=updated_self.email,
    first_name=updated_self.name.first,
    last_name=updated_self.name.last,
    middle_name=updated_self.name.middle )
  del updated_self
  self_update_user = True
---
depends on:
  - user_id
code: |
  user_role_resp = proxy_conn.get_user_roles(user_id)
---
code: |
  def has_role(data, role):
    try:
      return len(list(filter(lambda y: y.get('roleName') == role, data))) > 0
    except:
      return False
---
code: |
  resp = proxy_conn.get_user_roles(user_id)
  get_user_roles = True
---
reconsider:
  - user_role_resp
question: |
  Update user roles
fields:
  - Filer: enable_role_filer
    datatype: yesno
    default: ${ has_role(user_role_resp.data, 'FILER') }
  - Admin: enable_role_admin
    datatype: yesno
    default: ${ has_role(user_role_resp.data, 'FIRM_ADMIN') }
---
depends on:
  - enable_role_admin
  - enable_role_filer
code: |
  # Only two roles are relevant for the civil side:
  # FILER and FIRM_ADMIN. So our logic doesn't need to be fancy

  new_user_roles = []
  if enable_role_filer: # and 'FILER' not in user_role_resp:
    new_user_roles.append({'location': "","roleName": "FILER"})
  if enable_role_admin: # and 'FIRM_ADMIN' not in user_role_resp:
    new_user_roles.append({'location': "","roleName": "FIRM_ADMIN"})
  
  removed_user_roles = []
  if not enable_role_filer: 
    removed_user_roles.append({'location': "","roleName": "FILER"})
  if not enable_role_admin: 
    removed_user_roles.append({'location': "","roleName": "FIRM_ADMIN"})
---
code: |
  if len(new_user_roles): 
    add_resp = proxy_conn.add_user_roles(user_id, new_user_roles)
  else:
    add_resp = ''
  if len(removed_user_roles):
    del_resp = proxy_conn.remove_user_roles(user_id, removed_user_roles)
  else:
    del_resp = ''
  del user_id
  update_user_roles = True
---
code: |
  resp = proxy_conn.remove_user(id=user_id) 
  del user_id
  rm_user = True
---
code : |
  resp = proxy_conn.get_user_list()
  get_user_list = True
---
code: |
  resp = proxy_conn.get_user(id=user_id)
  del user_id
  get_user = True
---
code: |
  resp = proxy_conn.get_user()
  get_user_self = True
---
code: |
  resp = proxy_conn.get_courts()
  get_courts = True
---
code: |
  resp = proxy_conn.get_court(court_id)
  globals().pop('trial_court', None)
  globals().pop('court_id', None)
  get_court = True
---
code: |
  resp = proxy_conn.get_policy(court_id)
  globals().pop('trial_court', None)
  globals().pop('court_id', None)
  get_policy = True
---
code: |
  ask_for_search_dates
  resp = proxy_conn.get_filing_list(court_id, 
      user_id = filtering_user_id,
      start_date = start_date if defined('start_date') else None, 
      before_date = before_date if defined('before_date') else None)
  if resp.data is None:
    resp.data = []
  globals().pop('filtering_user_id', None)
  globals().pop('ask_for_search_dates', None)
  globals().pop('trial_court', None)
  globals().pop('court_id', None)
  get_filings = True
---
code: |
  resp = proxy_conn.resend_activation_email(id=user_id)
  del user_id
  resend_activation = True
---
code: |
  resp = proxy_conn.get_filing_status(court_id, filing_id)
  globals().pop('trial_court', None)
  globals().pop('court_id', None)
  globals().pop('filing_id', None)
  get_filing_status = True
---
code: |
  resp = proxy_conn.get_filing(court_id, filing_id)
  globals().pop('trial_court', None)
  globals().pop('court_id', None)
  globals().pop('filing_id', None)
  get_filing = True
---
code: |
  # TODO(qs): requires a bundle
  resp = proxy_conn.file_for_review(court_id)
  globals().pop('trial_court', None)
  globals().pop('court_id', None)
  dummy_filing = True
---
code: |
  resp = proxy_conn.cancel_filing_status(court_id, filing_id)
  globals().pop('trial_court', None)
  globals().pop('court_id', None)
  globals().pop('filing_id', None)
  cancel_filing = True
---
code: |
  resp = proxy_conn.get_notification_preferences()
  get_notification_preferences = True
---
code: |
  existing_notification_preferences = proxy_conn.get_notification_preferences()  
---
code: |
  notification_options = proxy_conn.get_notification_options()
---
reconsider:
  - existing_notification_preferences
id: notification preferences
question: |
  Notification preferences
fields:
  - label: |
      Select the updates that you would like to receive
    field: interim_notification_selections
    datatype: checkboxes
    code: |
      [{
         y.get('code'): y.get('description'), 
         'default': next(filter(lambda choice: choice.get('code') == y.get('code'), existing_notification_preferences.data)).get('isActive')
       } for y in notification_options.data or []]
---
code: |
  # sample:
  # {'code': 'SERVICEUNDELIVERABLE', 'isActive': False}
  new_notification_preferences = [
    {'code': item[0], 'isActive': item[1]} for item in interim_notification_selections.items()
  ]
  resp = proxy_conn.update_notification_preferences(new_notification_preferences)
  globals().pop('new_notification_preferences', None)
  globals().pop('interim_notification_selections', None)
  update_notification_preferences = True
---
code: |
  firm_details = proxy_conn.get_firm()
  if firm_details.data:
    updated_firm.default_name = firm_details.data.get('firmName')
    updated_firm.default_phone = firm_details.data.get('phoneNumber')
    updated_firm.default_address_address = firm_details.data.get('address',{}).get('addressLine1')
    updated_firm.default_address_unit = firm_details.data.get('address',{}).get('addressLine2')
    updated_firm.default_address_city = firm_details.data.get('address',{}).get('city')
    updated_firm.default_address_state = firm_details.data.get('address',{}).get('state')
    updated_firm.default_address_zip = firm_details.data.get('address',{}).get('zipCode')
    updated_firm.default_address_country = firm_details.data.get('address',{}).get('country')
  else:
    updated_firm.default_name = ""
    updated_firm.default_phone = ""
    updated_firm.default_address_address = ""
    updated_firm.default_address_unit = ""
    updated_firm.default_address_city = ""
    updated_firm.default_address_state = ""
    updated_firm.default_address_zip = ""
    updated_firm.default_address_country = ""
---
id: update firm information
question: |
  Update firm information
fields:
  - Firm name: updated_firm.name.text
    default: ${ updated_firm.default_name }
  - Phone number: updated_firm.phone_number  
    validate: phone_number_is_valid
    maxlength: 20
    # TODO: should we use the real regex? Feels unnecessary  
    default: ${ updated_firm.default_phone }
  - Street address: updated_firm.address.address
    address autocomplete: True    
    default: ${ updated_firm.default_address_address }
  - Unit: updated_firm.address.unit
    required: False    
    default: ${ updated_firm.default_address_unit }
  - City: updated_firm.address.city    
    default: ${ updated_firm.default_address_city }
  - State: updated_firm.address.state    
    default: ${ updated_firm.default_address_state if updated_firm.default_address_state else 'IL' }
    code: states_list()
  - Zip: updated_firm.address.zip
    default: ${ updated_firm.default_address_zip }
  - Country: updated_firm.address.country
    default: ${ updated_firm.default_address_country if updated_firm.default_address_country else 'US' }
    code: countries_list()
---
need:
  - updated_firm.name.text
code: |
  resp = proxy_conn.update_firm(updated_firm)
  del updated_firm
  update_firm = True
---
code: |
  resp = proxy_conn.get_attorney_list()
  get_attorney_list = True
---
code: |
  resp = proxy_conn.get_attorney(attorney_id)
  del attorney_id
  get_attorney = True
---
code: |
  resp = proxy_conn.create_attorney(new_attorney.bar_number,
    new_attorney.name.first, 
    middle_name=new_attorney.name.middle, 
    last_name=new_attorney.name.last)
  del new_attorney
  create_attorney = True  
---
code: |
  resp = proxy_conn.update_attorney(attorney_id,
    updated_attorney.bar_number,
    updated_attorney.name.first, 
    middle_name=updated_attorney.name.middle, 
    last_name=updated_attorney.name.last)
  globals().pop('updated_attorney', None)
  globals().pop('attorney_id', None)
  update_attorney = True
---
code: |
  resp = proxy_conn.remove_attorney(attorney_id)
  del attorney_id
  remove_attorney = True
---
code: |
  resp = proxy_conn.get_payment_account_type_list()
  get_payment_account_type_list = True
---
code: |
  resp = proxy_conn.get_payment_account_list()
  get_payment_account_list = True
---
code: |
  resp = proxy_conn.get_payment_account(payment_account_id)
  del payment_account_id
  get_payment_account = True
---
code: |
  resp = proxy_conn.update_payment_account(payment_account_id, payment_account_name, payment_account_active)
  globals().pop('payment_account_id', None)
  globals().pop('payment_account_name', None)
  globals().pop('payment_account_active', None)
  update_payment_account = True
---
code: |
  resp = proxy_conn.remove_payment_account(payment_account_id)
  del payment_account_id
  remove_payment_account = True
---
code: |
  resp = proxy_conn.get_service_contact_list()
  get_service_contact_list = True
---
code: |
  # TODO: this method is for ServiceContact, but name is not specific
  resp = proxy_conn.get_public_list()
  get_public_list = True
---
code: |
  resp = proxy_conn.get_service_contact(service_contact_id)
  del service_contact_id
  get_service_contact = True
---
code: |
  resp = proxy_conn.get_attached_cases(court_id, service_contact_id)
  globals().pop('trial_court', None)
  globals().pop('court_id', None)
  globals().pop('service_contact_id', None)
  get_attached_cases = True
---
need:
  - new_service_contact.name.first  
  - new_service_contact.address.address
  - new_service_contact.email
code: |
  resp = proxy_conn.create_service_contact(
      new_service_contact,
      is_public=new_service_contact.is_public,
      is_in_master_list=new_service_contact.is_in_master_list,
      admin_copy=new_service_contact.admin_copy if hasattr(new_service_contact, 'admin_copy') else None,
    )
  del new_service_contact
  create_service_contact = True
---
id: update service contact information
question: |
  Update service contact
fields:
  - Email address: updated_service_contact.email
    datatype: email
    default: ${ updated_service_contact.default_email }
  - First name: updated_service_contact.name.first
    default: ${ updated_service_contact.default_first }
  - Middle name: updated_service_contact.name.middle
    required: False
    default: ${ updated_service_contact.default_middle }
  - Last name: updated_service_contact.name.last
    default: ${ updated_service_contact.default_last }
  - Phone number: person_to_reg.phone_number
    validate: phone_number_is_valid
    maxlength: 20
    # TODO: should we use the real regex? Feels unnecessary  
    default: ${ updated_service_contact.default_phone }
  - Street address: updated_service_contact.address.address
    address autocomplete: True
    required: False
    default: ${ updated_service_contact.default_address }
  - Unit: updated_service_contact.address.unit
    default: ${ updated_service_contact.default_unit }
    required: False
  - City: updated_service_contact.address.city
    default: ${ updated_service_contact.default_city }
  - State: updated_service_contact.address.state
    default: ${ updated_service_contact.default_state }
    code: states_list()
  - Zip: updated_service_contact.address.zip
    default: ${ updated_service_contact.default_zip }
  - Country: updated_service_contact.address.country
    code: countries_list()
    default: ${ updated_service_contact.default_country }

---
code: |    
  current_service_contact = proxy_conn.get_service_contact(service_contact_id).data
  if current_service_contact:
    updated_service_contact.default_email = current_service_contact.get('email')
    updated_service_contact.default_first = current_service_contact.get('firstName')
    updated_service_contact.default_middle = current_service_contact.get('middleName')
    updated_service_contact.default_last = current_service_contact.get('lastName')
    updated_service_contact.default_phone = current_service_contact.get('phoneNumber')
    updated_service_contact.default_address = current_service_contact.get('address',{}).get('addressLine1')
    updated_service_contact.default_unit = current_service_contact.get('address',{}).get('addressLine2')
    updated_service_contact.default_city = current_service_contact.get('address',{}).get('city')
    updated_service_contact.default_state = current_service_contact.get('address',{}).get('state')
    updated_service_contact.default_zip = current_service_contact.get('address',{}).get('zipCode')
    updated_service_contact.default_country = current_service_contact.get('address',{}).get('country')
  else:
    updated_service_contact.default_email = ""
    updated_service_contact.default_first = ""
    updated_service_contact.default_middle = ""
    updated_service_contact.default_last = ""
    updated_service_contact.default_phone = ""
    updated_service_contact.default_address = ""
    updated_service_contact.default_unit = ""
    updated_service_contact.default_city = ""
    updated_service_contact.default_state = ""
    updated_service_contact.default_zip = ""
    updated_service_contact.default_country = ""
---
need:
  - updated_service_contact.name.first  
  - updated_service_contact.address.address
  - updated_service_contact.email
code: |
  resp = proxy_conn.update_service_contact(service_contact_id,
    updated_service_contact) # TODO(qs): are there additional params to add here?
  globals().pop('updated_service_contact', None)
  globals().pop('service_contact_id', None)
  update_service_contact = True  
---
code: |
  resp = proxy_conn.remove_service_contact(service_contact_id)
  del service_contact_id
  remove_service_contact = True
---
reconsider:
  - all_case_parties
id: case party id
question: |
  Case party id?
fields:
  - no label: case_party_id
    required: False
    code: |
      all_case_parties
---  
code: |
  all_case_parties = [(party.tyler_id, str(party.name)) for party in case_search.found_case.participants]
---
code: |
  if not service_contact_id:
    error_message = "You don't have any service contacts you can add." 
    show_error_event
  if case_search.case_was_found:
    resp = proxy_conn.attach_service_contact(service_contact_id, case_search.found_case.tracking_id, case_party_id)
    globals().pop('all_case_parties', None)
    globals().pop('service_contact_id', None)
    globals().pop('case_party_id', None)
    globals().pop('trial_court', None)
    globals().pop('court_id', None)
    attach_service_contact = True
  else:
    resp = ApiResponse(-1, '', None)
    attach_service_contact = False
---
code: |
  if not service_contact_id:
    error_message = f"You don't have any service contacts, so you can't detach any from cases."
    show_error_event
  if not attached_case_tracking_id:
    error_message = f"Couldn't find any cases attached to service contact {service_contact_id}"
    show_error_event
  resp = proxy_conn.detach_service_contact(service_contact_id, attached_case_tracking_id)
  log(f'{service_contact_id}, {attached_case_tracking_id})')
  globals().pop('service_contact_id', None)
  globals().pop('attached_case_tracking_id', None)
  detach_service_contact = True
---
code: |
  if case_search.case_was_found:
    resp = proxy_conn.get_service_information_history(case_search.court_id, case_search.found_case.tracking_id)
    globals().pop('trial_court', None)
    globals().pop('court_id', None)
    get_service_information_history = True
  else:
    resp = ApiResponse(-1, '', None)
    get_service_information_history = False
---
code: |
  if case_search.case_was_found:
    resp = proxy_conn.get_service_information(case_search.court_id, case_search.found_case.tracking_id)
    globals().pop('trial_court', None)
    globals().pop('court_id', None)
    get_service_information = True
  else:
    resp = ApiResponse(-1, '', None)
    get_service_information = False
---
code: |
  resp = proxy_conn.get_global_payment_account_list()
  get_global_payment_account_list = True
---
code: |
  resp = proxy_conn.get_global_payment_account(global_payment_account_id)
  del global_payment_account_id
  get_global_payment_account = True
---
code: |
  resp = proxy_conn.update_global_payment_account(global_payment_account_id, global_account_name, global_account_active)
  del global_payment_account_id
  update_global_payment_account = True
---
code: |
  resp = proxy_conn.remove_global_payment_account(global_payment_account_id)
  del global_payment_account_id
  remove_global_payment_account = True
---
code: |
  resp = proxy_conn.change_password(user_id, user_list_dict().get(user_id), new_user_password)
  globals().pop('user_id', None)
  globals().pop('new_user_password', None)
  change_password = True
---
id: field
question: |
  Data field
fields:
  - Field Name: field_name
---
code: |
  resp=proxy_conn.get_datafield(court_id, field_name)
  globals().pop('trial_court', None)
  globals().pop('court_id', None)
  globals().pop('field_name', None)
  get_datafield = True
---
code: |
  resp = proxy_conn.get_firm()
  get_firm = True  
---
id: results
question: |
  Results of your request
subquestion: |
  ${ debug_display(resp) }
continue button field: show_resp
---
id: results role update
question: |
  Results of your request
subquestion: |
  Adding roles: ${ add_resp }

  Removing roles: ${ del_resp }

continue button field: show_role_resp
---
event: show_error_event
question: |
  Error
subquestion: |
  ${ error_message }
---
code: |
  case_category_options, case_category_map = choices_and_map(proxy_conn.get_case_categories(court_id, fileable_only=False, timing=None).data)
---
comment: |
  Overrides login_qs: all jurisdictions allowed here are Tyler
depends on:
  - tyler_login
  - tyler_login_resp
if: can_check_efile
code: |
  logged_in_user_is_admin, logged_in_user_is_global_admin = get_tyler_roles(proxy_conn, {"TYLER-ID": tyler_user_id})
---
mandatory: True
code: |
  all_done

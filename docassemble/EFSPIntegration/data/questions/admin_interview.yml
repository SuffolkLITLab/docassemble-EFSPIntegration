---
modules:
  - .efm_client
---
objects:
  person_to_reg: Individual
---
code: |
  proxy_conn = ProxyConnection() 
---
code: |
  user_admin_list = [
    ('reauth', 'Login'),
    ('self_change_password', 'Self Change Password'),
    ('rm_user', 'Remove user'),
    ('get_user_list', 'Get All Users'),
    ('get_user', 'Get User'),
    ('self_resend_activation', 'Resend Self Activitation Email'),
    ('resend_activation', 'Resend Other Activitation Email'),
  ]
  filing_admin_list = [
    ('get_courts', 'See all Courts'),
    ('get_filings', 'See Filings'),
    ('get_filing_status', 'Get filing Status'),
    ('get_filing', 'See Filing Info'),
    ('cancel_filing', 'Cancel Filing'),
    ('dummy_filing', 'Dummy File'),
    ('check_filing', 'Check filing'),
    ('get_firm', 'Get Firm'),
    ('update_firm', 'Update Firm'),
    ('get_attorney_list', 'Get All Attorneys'),
    ('get_attorney', 'Get Attorney'),
    ('update_attorney', 'Update Attorney'),
    ('remove_attorney', 'Remove Attorney'),
  ]
---
question: |
  Login Info?
fields:
  - email: my_username
  - password: my_password
    datatype: password
---
question: | 
  What to do?
subquestion: |
  As ${ my_username }

  ${ reauth }

  ## User Administration
      
  ${ action_button_html(url_ask(
      [{'recompute': ['person_to_reg', 'register', 'show_resp']}]),
      label='Register') }

  % for elem in user_admin_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1]) }

  % endfor

  ## Filing

  % for elem in filing_admin_list:
  ${ action_button_html(url_ask(
      [{'recompute': [elem[0], 'show_resp']}]), 
      label=elem[1]) }
  
  % endfor

  ${ action_button_html(url_ask(
    [{'recompute': ['get_payment_account_type_list', 'show_resp']}]),
    label='Get payment account type list') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_payment_account_list', 'show_resp']}]),
    label='Get payment account list') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_payment_account', 'show_resp']}]),
    label='Get payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['update_payment_account', 'show_resp']}]),
    label='Update payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['create_payment_account', 'show_resp']}]),
    label='Create payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['remove_payment_account', 'show_resp']}]),
    label='Remove payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_service_contact_list', 'show_resp']}]),
    label='Get service contact list') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_service_contact', 'show_resp']}]),
    label='Get service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['create_service_contact', 'show_resp']}]),
    label='Create service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['update_service_contact', 'show_resp']}]),
    label='Update service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['remove_service_contact', 'show_resp']}]),
    label='Remove service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['attach_service_contact', 'show_resp']}]),
    label='Attach service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['detach_service_contact', 'show_resp']}]),
    label='Detach service contact') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_global_payment_account_list', 'show_resp']}]),
    label='Get global payment account list') }

  ${ action_button_html(url_ask(
    [{'recompute': ['get_global_payment_account', 'show_resp']}]),
    label='Get global payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['update_global_payment_account', 'show_resp']}]),
    label='Update global payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['create_global_payment_account', 'show_resp']}]),
    label='Create global payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['remove_global_payment_account', 'show_resp']}]),
    label='Remove global payment account') }

  ${ action_button_html(url_ask(
    [{'recompute': ['change_password', 'show_resp']}]),
    label='Change password') }

  ${ action_button_html(url_ask(
    [{'recompute': ['new_payment_account', 'show_resp']}]),
    label='New payment Account') }

continue button field: all_done
---
question: |
  Self email?
fields:
  - email: email
---
generic object: Individual
question: |
  Name?
fields:
  - First Name: x.name.first
  - Middle Name: x.name.middle
  - Last Name: x.name.last
---
generic object: Individual
question: |
  Address?
fields:
  - Street: x.address.address
  - Unit: x.address.unit
  - City: x.address.city
  - State: x.address.state
  - Zip: x.address.zip_code
  - Country: x.address.country
---
generic object: Individual
question: |
  Contact Info?
fields:
  - Phone Number: x.mobile_number
  - email: x.email
    datatype: email
---
question: |
  Password?
fields:
  - Password: new_password
    datatype: password
---
question: |
  User ID?
fields:
  - User ID: user_id
---
question: |
  Court Id?
fields:
  - Court ID: court_id
---
event: query_variables
code: |
  variables_as_json()
---
question: |
  Filing id?
fields:
  - Filing id: filing_id
---
question: |
  Firm id?
fields:
  - Firm id: firm_id
---
question: |
  Attorney id?
fields:
  - Attorney id: attorney_id
---
question: |
  Current password?
fields:
  - Password: current_password
    datatype: password
---
question: |
  Payment account id?
fields:
  - Payment account id: payment_account_id
---
question: |
  Global payment account id?
fields:
  - Global payment account id: global_payment_account_id
---
question: |
  New password?
fields:
  - Password: new_user_password
    datatype: password      
---
question: |
  Service contact id?
fields:
  - Service contact id: service_contact_id

---
question: |
  Registration Type
fields:
  - Registration type: reg_type
    choices:
      - INDIVIDUAL
      - FIRM_ADMINISTRATOR
      - FIRM_ADMIN_NEW_MEMBER
---
question: |
  New payment account
subquestion: |
  <span id="inset_form"></span>
script: |
# Basis from https://stackoverflow.com/a/133997
# TODO(brycew): just submit this + actual payment info to the Efile server as a POST,
# Then hang on to that data with the transaction Id (created there), and send user to
# the TOGA site, and it replies back to the proxy, which forwards back to the DA interview
  <script>
      data = '<PaymentRequest></PaymentRequest>'; 
      
      const form = document.createElement('form');
      form.method = 'post';
      form.target = '_blank';
      form.action = 'https://togatest.tylerhost.net/EPayments/Webs/EPayment.aspx';
      
      const hiddenField = document.createElement('input');
      hiddenField.type = 'hidden';
      hiddenField.name = 'RequestXML';
      hiddenField.value = data;
      form.appendChild(hiddenField);
      document.body.appendChild(form);
      form.submit();
  </script>
#      '  <input type="text" name="RequestXML" value="' + data +  '" style="display:none;"/> ' +
#      ' <button>Click here if not working</button> </input>' +
continue button field: new_payment_account

---
code: |
  #new_payment_account = True
  #command('leave', url=proxy_conn.base_url + '/payments/new_toga_account')
---
sets: proxy_conn.authed_user_id
code: |
  resp = proxy_conn.authenticate_user(tyler_email=my_username, tyler_password=my_password)
  del my_password
  # TODO(brycew): handle improper login info
  reauth = True
---
code: |
  resp = proxy_conn.register_user(person_to_reg, registration_type=reg_type, password=new_password)
  del new_password, reg_type
  register = True
---
code: |
  resp = proxy_conn.remove_user(id=user_id) 
  del user_id
  rm_user = True
---
code : |
  resp = proxy_conn.get_user_list()
  get_user_list = True
---
code: |
  resp = proxy_conn.get_user(id=user_id)
  del user_id
  get_user = True
---
code: |
  resp = proxy_conn.get_courts()
  get_courts = True
---
code: |
  resp = proxy_conn.get_filing_list(court_id)
  del court_id
  get_filings = True
---
code: |
  resp = proxy_conn.self_resend_activation_email(email)
  del email
  self_resend_activation = True
---
code: |
  resp = proxy_conn.resend_activation_email(id=user_id)
  del user_id
  resend_activation = True
---
code: |
  resp = proxy_conn.get_filing_status(court_id, filing_id)
  del court_id
  del filing_id
  get_filing_status = True
---
code: |
  resp = proxy_conn.get_filing(court_id, filing_id)
  del court_id
  del filing_id
  get_filing = True
---
code: |
  # TODO(qs): requires a bundle
  resp = proxy_conn.file_for_review(court_id)
  del court_id
  dummy_filing = True
##################################
# Q Starting
---
code: |
  resp = proxy_conn.cancel_filing_status(court_id, filing_id)
  del court_id
  del filing_id
  cancel_filing = True
---
code: |
  # TODO(qs): requires a bundle
  resp = proxy_conn.check_filing(court_id, al_court_bundle)
  del court_id
  check_filing = True
---
# code: |
#   resp = proxy_conn.CancelFilingStatus(court_id, filing_id)
#   del court_id
#   del filing_id
#   cancel_filing = True
# ---
code: |
  resp = proxy_conn.get_firm()
  del firm_id
  get_firm = True
---
code: |
  resp = proxy_conn.update_firm()
  del firm_id
  update_firm = True
---
code: |
  resp = proxy_conn.get_attorney_list(firm_id)
  del firm_id
  get_attorney_list = True
---
code: |
  resp = proxy_conn.get_attorney(firm_id, attorney_id)
  del firm_id
  get_attorney = True
---
code: |
  resp = proxy_conn.create_attorney(firm_id)
  del firm_id
  del attorney_id
  create_attorney = True  
---
code: |
  resp = proxy_conn.update_attorney(firm_id, attorney_id)
  del firm_id
  del attorney_id
  update_attorney = True
---
code: |
  resp = proxy_conn.remove_attorney(firm_id, attorney_id)
  del firm_id
  del attorney_id
  remove_attorney = True
---
code: |
  resp = proxy_conn.get_payment_account_type_list()
  get_payment_account_type_list = True
---
code: |
  resp = proxy_conn.get_payment_account_list(firm_id)
  del firm_id
  get_payment_account_list = True
---
code: |
  resp = proxy_conn.get_payment_account(firm_id, payment_account_id)
  del firm_id
  del payment_account_id
  get_payment_account = True
---
code: |
  resp = proxy_conn.update_payment_account(firm_id, payment_account_id)
  del firm_id
  del payment_account_id
  update_payment_account = True
---
code: |
  resp = proxy_conn.create_payment_account(firm_id)
  del firm_id
  create_payment_account = True
---
code: |
  resp = proxy_conn.remove_payment_account(firm_id, payment_account_id)
  del firm_id
  del payment_account_id
  remove_payment_account = True
---
code: |
  # TODO: not implemented anymore?
  resp = proxy_conn.get_vitalcheck_payment_account_id(firm_id)
  del firm_id
  get_vitalcheck_payment_account_id = True
---
code: |
  resp = proxy_conn.create_inactive_payment_account(firm_id)
  del firm_id
  create_inactive_payment_account = True
---
code: |
  resp = proxy_conn.get_service_contact_list(firm_id)
  del firm_id
  get_service_contact_list = True
---
code: |
  # TODO: this method is for ServiceContact, but name is not specific
  resp = proxy_conn.get_public_list(firm_id)
  del firm_id
  get_public_list = True
---
code: |
  resp = proxy_conn.get_service_contact(firm_id, service_contact_id)
  del firm_id
  del service_contact_id
  get_service_contact = True
---
code: |
  resp = proxy_conn.create_service_contact(firm_id, service_contact_id)
  del firm_id
  del service_contact_id
  create_service_contact = True
---
code: |
  resp = proxy_conn.update_service_contact(firm_id, service_contact_id)
  del firm_id
  del service_contact_id
  update_service_contact = True  
---
code: |
  resp = proxy_conn.remove_service_contact(firm_id, service_contact_id)
  del firm_id
  del service_contact_id
  remove_service_contact = True
---
code: |
  resp = proxy_conn.attach_service_contact(firm_id, service_contact_id)
  del firm_id
  del service_contact_id
  attach_service_contact = True
---
code: |
  resp = proxy_conn.detach_service_contact(firm_id, service_contact_id)
  del firm_id
  del service_contact_id
  detach_service_contact = True
---
code: |
  resp = proxy_conn.get_global_payment_account_list()
  get_global_payment_account_list = True
---
code: |
  resp = proxy_conn.get_global_payment_account(global_payment_account_id)
  del global_payment_account_id
  get_global_payment_account = True
---
code: |
  resp = proxy_conn.update_global_payment_account(global_payment_account_id)
  del global_payment_account_id
  update_global_payment_account = True
---
code: |
  resp = proxy_conn.create_global_payment_account()
  del global_payment_account_id
  create_global_payment_account = True
---
code: |
  resp = proxy_conn.remove_global_payment_account(global_payment_account_id)
  del global_payment_account_id
  remove_global_payment_account = True
---
code: |
  resp = proxy_conn.change_password(user_id, email, new_user_password)
  del user_id
  del new_user_password
  change_password = True
---
code: |
  resp = proxy_conn.self_change_password(current_password, new_user_password)
  del current_password, new_user_password
  self_change_password = True
---
question: |
  show resp:
subquestion: |
  % if isinstance(resp.data, list):

  % for idx, elem in enumerate(resp.data):
  * idx: ${ idx }

    % if isinstance(elem, dict):
    % for k, inner_elem in elem.items():
      * ${ k }: ${ inner_elem }

    % endfor
    % else:
      * ${ elem }
    % endif

  % endfor

  % else:
  ${ resp }
  % endif
continue button field: show_resp
---
mandatory: True
code: |
  all_done
---
code: |
  user_registration_choices = [
    ('INDIVIDUAL', 'Pro Se user'),
    ('FIRM_ADMINISTRATOR', 'Administrator of a new firm'),
    ('FIRM_ADMIN_NEW_MEMBER', 'New member of current firm')
  ]
---
id: registration type
question: |
  Registration Type
fields:
  - Registration type: reg_type
    datatype: radio
    code: |
      user_registration_choices
  - note: |
      ---
  - Email address: person_to_reg.email
    datatype: email
    required: True
  - note: |
      ${ password_rules.data.get("validationmessage") }

  - Password: new_password
    datatype: password
    validate: proxy_conn.is_valid_password
  - Phone number: person_to_reg.phone_number
    validate: phone_number_is_valid
    maxlength: 20
    # TODO: should we use the real regex? Feels unnecessary
  - Firm name: person_to_reg.firm_name
    show if:
      variable: reg_type
      is: FIRM_ADMINISTRATOR
  - First name: person_to_reg.name.first
  - Middle name: person_to_reg.name.middle
    required: False
  - Last name: person_to_reg.name.last
  - note: |
      ---
  - Street address: person_to_reg.address.address
    required: True
  - Unit: person_to_reg.address.unit
    required: False
  - City: person_to_reg.address.city
  - State: person_to_reg.address.state
    code: states_list()
    default: ${ state_name_to_code(jurisdiction_id) }
  - Zip: person_to_reg.address.zip
  - Country: person_to_reg.address.country
    code: countries_list()
    default: US
---
code: |
  password_rules = proxy_conn.get_password_rules()
---
id: court
question: |
  Choose a court
fields:
  - no label: trial_court
    code: |
      trial_court_options
---
code: |
  trial_court_resp = proxy_conn.get_courts(fileable_only=True, with_names=True)
  trial_court_options = sorted([(court['code'], court['name']) for court in trial_court_resp.data or []], key=lambda c: c[1])
  trial_court_map = {court['code']: court['name'] for court in trial_court_resp.data or []}
---
if: defined('court_id')
code: |
  trial_court = trial_court_map[court_id]

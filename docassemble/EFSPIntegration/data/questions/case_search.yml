---
modules:
  - .efm_client
  - .conversions
---
include:
  - login_qs.yml
---
objects: 
  - found_cases: DAList.using(object_type=DAObject, auto_gather=False)  
---
objects:
  - somebody: ALIndividual
---
id: interview order
code: |
  court_id
  do_what_choice
---
if: |
  do_what_choice == 'party_search'
code: |
  somebody.name.first
  if not case_search_task_status.ready():
    case_search_waiting_screen
  else:
    if not found_case_options:
      warn_no_results
      interview_order_find_case = False
    elif case_tracking_choice is None:
      failed_case_search
      interview_order_find_case = False
    else:
      case_tracking_id = case_tracking_choice
      found_case = next(filter(lambda case: case.tracking_id == case_tracking_id, found_cases))
      interview_order_find_case = True
---
if: |
  do_what_choice == 'docket_lookup'
code: |
  case_docket_id
  if not docket_case_response.is_ok() or len(docket_case_response.data) == 0:
    failed_case_search
    del case_docket_id, docket_case_response
    interview_order_find_case = False 
  else:
    case_tracking_id = docket_case_response.data[0].get('value',{}).get('caseTrackingID',{}).get('value')
    found_case = DAObject()
    parse_case_info(proxy_conn, found_case, docket_case_response.data[0], court_id)
    display_case
    interview_order_find_case = True
---
if: |
  do_what_choice == 'non-indexed-case':
code: |
  if can_file_non_indexed_case:
    non_indexed_docket_number
    found_case = DAObject(case_tracking_id=case_tracking_id)
  else:
    no_non_indexed_cases
---  
code: |
  court_code_results = proxy_conn.get_court(court_id).data
  if court_code_results:
    can_file_non_indexed_case = court_code_results.get('allowfilingintononindexedcase') or False
  else:
    can_file_non_indexed_case = False    
---
id: ask non-indexed docket number
question: |
  Case number
subquestion: |
  Enter the case number for the non-indexed case

  ${ collapse_template(case_number_format_template) }
  
  ${ collapse_template(case_number_format_cook_county_template) }
  
fields:
  - Case number: non_indexed_docket_number
# TODO: input validation is not possible--no required format for
# case number in Illinois
---
template: case_number_format_template
subject: |
  How to enter your case number (Except Cook County)
content: |
  [See information here](https://odysseyfileandserve.zendesk.com/hc/en-us/articles/360049682351-Illinois-What-is-the-correct-format-for-my-case-number-)
---
template: case_number_format_cook_county_template
subject: |
  How to enter your case number (Chicago/Cook County only)
content: |
  [See information here](https://www.illinoislegalaid.org/legal-information/e-filing-tips-cook-county)
---
id: no non-indexed cases
question: |
  ${ court_id} does not allow filing into non-indexed cases
continue button field: no_non_indexed_cases  
---
id: no cases found
question: |
  No cases found
subquestion: |
  You can either enter a case tracking ID or hit "back" to 
  try a new search.
continue button field: warn_no_results
---
id: case lookup
question: |
  Case lookup
subquestion: |
  ${ collapse_template(explain_case_search_choices_template) }
field: do_what_choice
choices:
  - Find a case by party name: party_search
  - Find a case by Case Number: docket_lookup
  - I want to file into a non-indexed case: non-indexed-case
---
template: explain_case_search_choices_template
subject: |
  What is a non-indexed case?
content: |
  Some courts only allow you to search part of the court's
  docket. If that applies to the court you want to file into,
  you can still file but you must use the case number so that
  a clerk can match your filing to the case.
---
objects:
  - somebody: ALIndividual
---
sets:
  - somebody.name.first
id: party name
question: |
  Party name to find
subquestion: |
  Enter the name of a party involved in the case
fields:
  code: |
    somebody.name_fields(person_or_business='unknown')
---
id: court
question: |
  Choose a court
fields:
  - no label: trial_court
    code: |
      all_courts
---
code: |
  all_courts = proxy_conn.get_courts().data
---
event: case_search_waiting_screen
question: |
  Your search is in progress, please wait
---
code: |
  case_search_task_status = background_action('case_search_task', 'refresh')
---
event: case_search_task
code: |
  background_response_action('case_search_done', case_response = proxy_conn.get_cases(court_id, somebody, None))
---
event: case_search_done
code: |
  get_cases_response = action_argument('case_response')
  background_response()
---
id: docket id
question: |
  Case number
subquestion: |
  ${ collapse_template(case_number_format_template) }
  
  ${ collapse_template(case_number_format_cook_county_template) }

fields:
  - Case number: case_docket_id
---
need:
  - proxy_conn.authed_user_id
depends on:
  - case_docket_id
code: |
  docket_case_response = proxy_conn.get_cases(court_id, docket_id=case_docket_id)
---
id: results
question: |
  Results
subquestion: |
  ${ collapse_template(case_results_template) }
fields:
  - Which case?: case_tracking_choice
    datatype: checkboxes 
    code: |
      found_case_options
---
template: case_results_template
subject: |
  View case data
content: |
  % for case in found_cases:
  #### ${ case.title } (${ case.date })
  * DocketID: ${ case.docket_id }
  * CourtID: ${ case.court_id }
  * TrackingID: ${ case.tracking_id }
  * CaseCategory: ${ case.category }  
  % endfor  
---
id: display case
continue button field: display_case
question: |
  Results
subquestion: |
  #### ${ found_case.title} (${ found_case.date })
  * DocketID: ${ found_case.docket_id }
  * CourtID: ${ found_case.court_id }
  * TrackingID: ${ found_case.tracking_id }
  * CaseCategory: ${ found_case.category }  
---
need:
  - court_id
  - somebody.name.first
  - found_cases
id: get cleaned up results
code: |
    found_cases.clear()

    #try: # trap name errors, etc. so Docassemble will only run this code once
    first_pass = get_cases_response = proxy_conn.get_cases(court_id, person=somebody)
    if first_pass.is_ok():
      for entry in first_pass.data:
        new_case = found_cases.appendObject()
        parse_case_info(proxy_conn, new_case, entry, court_id)
    # except:
    #  message("Something went wrong")
    
    found_cases.gathered = True
    found_case_options = [{case.tracking_id: f"{case.docket_id} {case.title} ({case.date})"} for case in found_cases]

---
modules:
  - .efm_client
  - .conversions
---
code: |
  proxy_conn = ProxyConnection()  # Uses default configs in the python module
---
# You can override this value in your own interview
code: |
  efile_author_mode = True
---
id: your contact information
question: |
  What is your contact information?
subquestion: |
  Include at least **one** way to reach you other than by mail.
fields:  
  - Mobile number: users[0].mobile_number
    required: False
  - Other phone number: users[0].phone_number
    required: False
  - Email address: users[0].email    
    datatype: email
    # Email is required if the user wants to efile,
    # and we have to be able to attempt efiling, meaning the court has to be right
    required: court_id in available_courts and will_efile
  - Other ways to reach you: users[0].other_contact_method
    input type: area
    required: False
    help: |
      If you do not have a phone number or email, provide
      specific contact instructions. For example, use a friend's phone number.
      But the friend must be someone you can rely on to give you a
      message.
validation code: |
  if (not showifdef('users[0].phone_number') and \
      (not showifdef('users[0].mobile_number')) and \
      (not showifdef('users[0].email')) and \
      (not showifdef('users[0].other_contact_method'))):
    validation_error(word("You need to provide at least one contact method."), field="users[0].other_contact_method")
---
question: |
  % if resp.response_code == 200:
  Your form was submitted!
  % else:
  Something went wrong delivering your form
  % endif
subquestion: |
  % if resp.response_code == 200:
  You should receive a confirmation email within 10-15 minutes, and
  you should receive an update from the ${ trial_court } clerk on your filing 
  within 2 weeks.
  
  We recommend you continue down below to download the form for your own records.

  % else:
  Something went wrong delivering your form to the ${trial_court}.  
  Try again later or call the Courtâ€™s Emergency HelpLine 833-91-COURT (833-912-6878). 
  
  The Emergency HelpLine is open:  
  8:30am - 4:30pm,  
  Monday - Friday.  

  % endif

help:
  label: |
    ${ 'What went wrong?' if resp.response_code != 200 else 'Details' }
  content: |
    Some debugging information:

    ${ resp }
continue button field: show_resp
continue button label: Back to download screen
---
need:
  - comments_to_clerk
  - package_version_number
id: ready to efile
question: |
  Final Review With Cover Page
subquestion: |
  
  % if could_efile:
  Below is your ${comma_and_list(al_court_bundle.get_titles())} document with the 
  cover page that we will deliver to ${trial_court}.

  We will deliver it securely. Please allow up to 15 minutes for the filing to
  arrive. We will email with a confirmation that it was delivered, and some additional
  information that you should hang on to.
  
  Click "Back" if you need to make any changes.  
  Click "Send to court" to deliver it.
  
  Here is what the clerk at ${trial_court} will get:
  % else:

  We ran into some technical problems and there was a problem delivering this to the ${trial_court}.
  You can download the form below to print and submit.

  % endif

  ${ al_court_bundle.as_pdf() }  

  % if could_efile:
  Press below to deliver the form.
  % endif
fields:
  - Send me a copy: should_cc_user
    datatype: yesno
  - Email address: cc_email
    datatype: email
    show if: should_cc_user
    default: ${users[0].email if defined('users[0].email') else ''}
continue button field: efile_user_reviewed
continue button label: Send to court
---
comment: |
  To integrate with other interviews, go to the last page, and add the below:
    
  ${ action_button_html(url_ask([{'recompute': ['efile']}]),
     label='E-file') }
---
question: |
  Something went wrong when submitting
subquestion: |
  We ran into some technical problems and there was a problem delivering this to the ${trial_court}.

  You have a few options:

  * You can download the form to print and submit
  * You can save [this URL]() and come back after we have fixed things
  * We can email you when we've fixed things, no need to save the URL

  Which would you prefer to do?
fields:
  - no label: fallback_user_choice
    choices:
      - Download form now: download form
      - Save URL: save url
      - Email me at ${ users[0].email }: email me
---
question: |
  Missing fields
subquestion: |
  Notice: you are in interview author mode!

  To efile using the proxy server, you need to fix some problems in your interview.

  % if check_resp.error_msg:
  Something went wrong when processing your interview:  

  ${ check_resp }

  % elif len(remaining_to_check["optional_vars"]) > 0 or len(remaining_to_check["required_vars"]) > 0:
  
  You need to add some more questions to fill these variables:

  ## Required

  % for var in remaining_to_check["required_vars"]:
  * ${ var["name"] }: ${ var["description"] }. Should be a ${ var["datatype"] }
    % if len(var["choices"]) > 0:
    and have these choices:
    % for choice in var["choices"]:
      * ${ choice }
    % endfor
    % endif
  % endfor

  ## Optional

  % for var in remaining_to_check["optional_vars"]:
  * ${ var["name"] }: ${ var["description"] }. Should be a ${ var["datatype"] }
    % if len(var["choices"]) > 0:
    and have these choices:
    % for choice in var["choices"]:
      * ${ choice }
    % endfor
    % endif
  % endfor

  % endif

continue button field: show_remaining
---
question: |
  Do you want to efile this document directly with the court?
subquestion: |
  This means you don't have to print out the document. The court
  will communicate with you through your email or phone.
yesno: will_efile
---
objects:
  - follow_up_vars: DADict
---
id: follow up setup
code: |
  follow_up_vars.there_are_any = True
  for var in remaining_to_check["required_vars"]:
    newName = var["name"].replace('.', '_').replace('[', '_').replace(']', '_')
    follow_up_vars.initializeObject(newName, DAObject)
    follow_up_vars[newName].name = var["name"]
    follow_up_vars[newName].description = var["description"]
  follow_up_vars.there_is_another = False
  follow_up_vars.gathered = True
  follow_up_setup = True
---
id: get available_courts 
code: |
  resp = proxy_conn.AuthenticateUser()  # Uses default config keys
  if resp.response_code == 200:
    available_courts = proxy_conn.GetCourts().data
  else:
    log("Couldn't login to the proxy server! " + str(resp))
    available_courts = []
  court_id = convert_court_to_id(trial_count)
---
id: could_efile
code: |
  # Ask for the clerk comments, they'll go in the lead filing doc comments
  if court_id in available_courts and will_efile:
    check_resp = proxy_conn.CheckFiling(court_id, al_court_bundle)
    remaining_to_check = check_resp.data
    if check_resp.error_msg:
      could_efile = False
      if efile_author_mode:
        show_remaining
      
    elif len(remaining_to_check["required_vars"]) == 0:
      could_efile = True
    else:
      if efile_author_mode:
        show_remaining
        follow_up_setup 
        for key in follow_up_vars.keys():
          define(follow_up_vars[key].name, follow_up_vars[key].value)
        could_efile = True
      else:
        could_efile = False
        fallback_user_choice
        act_on_user_choice
        show_user_choice
        command('exit')
  else:
    could_efile = False
---
code: |
  if fallback_user_choice == 'download form':
    efile_user_reviewed
    # TODO(brycew): don't restart here
    command('restart')
  elif fallback_user_choice == 'email me':
    # TODO(brycew): send an email
    pass
  else: # save url
    # TODO(brycew): show the URL
    pass
  act_on_user_choice = True
---
id: actually efile
code: |
  if could_efile and will_efile:
    efile_user_reviewed
    # prevent_going_back()
    resp = proxy_conn.FileForReview(court_id, al_court_bundle)

    show_resp
    efile = True
  efile = False
---
generic object: DAObject
question: |
  Missing Field: ${ x[i].name }
subquestion: |
  ${ x[i].description }
fields:
  - no label: x[i].value
---
modules:
  - docassemble.ALToolbox.misc
  - .efm_client
  - .conversions
  - .interview_logic
---
include:
  - common_qs.yml
---
code: |
  proxy_conn = ProxyConnection()  # Uses default configs in the python module
---
# It's best to leave this be, but it's changable if you can't access the server configuration
code: |
  efile_author_mode = get_config("debug")
---
sets:
  - users[0].phone_number
  - users[0].mobile_number
  - users[0].email
  - users[0].other_contact_method
id: your contact information
question: |
  What is your contact information?
subquestion: |
  Include at least **one** way to reach you other than by mail.
fields:
  code: |
    contact_fields_with_defaults(proxy_conn, users[0], logged_in_user_is_admin, can_check_efile)
validation code: |
  if (not showifdef('users[0].phone_number') and \
      (not showifdef('users[0].mobile_number')) and \
      (not showifdef('users[0].email')) and \
      (not showifdef('users[0].other_contact_method'))):
    validation_error(word("You need to provide at least one contact method."), field="users[0].other_contact_method")
---
id: submitted form
question: |
  % if efile_resp.response_code == 200:
  Your form was submitted!
  % else:
  Something went wrong delivering your form
  % endif
subquestion: |
  % if efile_resp.response_code == 200:
  You should receive a confirmation email within 10-15 minutes, and
  you should receive an update from the ${ trial_court } clerk on your filing 
  within 48 hours.
  
  We recommend you continue down below to download the form for your own records.
  Click **Back to download screen** to get a copy of your forms and instructions.

  % endif
  
  Here are the forms that you submitted:
  
  ${ al_court_bundle.as_pdf() }

  ${ collapse_template(debug_details) }

continue button field: show_resp
continue button label: Back to download screen
---
template: debug_details
subject: |
  ${ 'What went wrong?' if efile_resp.response_code != 200 else '' }
content: |
  % if efile_resp.response_code != 200:
  Some additional information:
    
  % if defined('efile_case_category') and defined('case_category_map'):
  * Case category: ${ efile_case_category } ${ case_category_map.get(efile_case_category) }
  % endif
  % if defined('efile_case_type') and defined('case_type_map'):
  * Case type: ${ efile_case_type } ${ case_type_map.get(efile_case_type) }
  % endif
  % if defined('al_court_bundle[0].filing_type'):
  * Lead document type: ${ al_court_bundle[0].filing_type }
  % endif
  % if defined('al_court_bundle[0].document_type'):
  * Document security: ${ al_court_bundle[0].document_type }
  % endif

  ${ efile_resp }
  % endif
---
id: ready to efile
question: |
  Final review before e-filing
subquestion: |
  
  % if ready_to_efile:
  Below is your ${comma_and_list(al_court_bundle.get_titles())} ${ noun_plural('form', al_court_bundle.get_titles()) } 
  that we will deliver to the ${trial_court} clerk.

  We will deliver it securely. Please allow up to 15 minutes for the filing to
  arrive. We will email you a confirmation that it was delivered and additional
  information about what's next.
  
  Click **Back** if you need to make any changes.
  Click **Send to court** to deliver it.
  
  Here is what the ${trial_court} clerk will get:
  % else:

  We ran into some technical problems and there was a problem delivering this to the ${trial_court}.
  You can download the form below to print and submit.

  % endif

  ${ al_court_bundle.as_pdf() }

  % if ready_to_efile:
  Your forms are not e-filed until you press **Send to court** below.
  % endif
continue button field: efile_user_reviewed
continue button label: ":file-export: Send to court"
---
comment: |
  To integrate with other interviews, go to the last page, and add the below:
    
  ${ action_button_html(url_ask([{'recompute': ['efile']}]),
     label='E-file') }
---
id: something wrong when submitting
question: |
  Something went wrong when submitting
subquestion: |
  We ran into some technical problems and there was a problem delivering this to the ${trial_court}.
  You can continue to a page that will let you download your form.
continue button field: fallback_user_choice
---
id: user-wants-efile
question: |
  Do you want to e-file this document directly with the court?
subquestion: |
  You are able to electronically-file (e-file) this document with ${ full_court_info['name'] }!

  This means you don't have to print out the document. The court
  will communicate with you through your email or phone.

  You will have to provide your email to e-file this document. If you don't wish to provide that,
  you can choose not to efile.
fields:
  - Do you want to e-file?: user_wants_efile
    datatype: yesnoradio
---
id: you-will-not-be-able-to-efile
question: |
  You will *not* be able to efile this document
subquestion: |
  Unfortunately, you won't be able to efile this document at ${ trial_court }.

  However, you are still be able to continue and download a completed form.
continue button field: show_no_efile
---
id: missing-fields
question: |
  Missing fields
subquestion: |
  Notice: you are in interview author mode!

  To efile using the proxy server, you need to fix some problems in your interview.

  % if not check_resp.is_ok():
  Something went wrong when processing your interview:  

  ${ check_resp }

  % elif remaining_to_check.get("optional_vars") or remaining_to_check.get("required_vars"):
  
  You need to add some more questions to fill these variables:

  ## Required

  % for var in remaining_to_check.get("required_vars") + remaining_to_check.get("wrong_vars"):
  * ${ var.get("name") }: ${ var.get("description") }. Should be a ${ var.get("datatype") }
    % if var.get("choices"):
    and have these choices:
    % for choice in var.get("choices"):
      * ${ choice }
    % endfor
    % endif
  % endfor

  ## Optional

  % for var in remaining_to_check.get("optional_vars"):
  * ${ var.get("name") }: ${ var.get("description") }. Should be a ${ var.get("datatype") }
    % if var.get("choices"):
    and have these choices:
    % for choice in var.get("choices",[]):
      * ${ choice }
    % endfor
    % endif
  % endfor

  % endif

event: show_remaining
---
objects:
  - follow_up_vars: DADict
---
id: follow up setup
code: |
  follow_up_vars.there_are_any = True
  for var in remaining_to_check.get("required_vars",[]):
    newName = var.get(["name"].replace('.', '_').replace('[', '_').replace(']', '_') )
    new_var = follow_up_vars.initializeObject(newName, DAObject)
    new_var.name = var.get("name")
    new_var.description = var.get("description")
  for var in remaining_to_check.get("wrong_vars",[]):
    newName = var["name"].replace('.', '_').replace('[', '_').replace(']', '_')
    new_follow_up_var = follow_up_vars.initializeObject(newName, DAObject)
    new_follow_up_var.name = var.get("name")
    new_follow_up_var.description = var.get("description")
  follow_up_vars.there_is_another = False
  follow_up_vars.gathered = True
  follow_up_setup = True
---
id: get available_efile_courts
code: |
  available_efile_courts = get_available_efile_courts(proxy_conn)
---
depends on:
  - trial_court
code: |
  court_id = convert_court_to_id(trial_court)
---
depends on:
  - court_id
  - available_efile_courts
only sets: efile_setup
code: |
  efile_setup = court_id in available_efile_courts
---
id: check efile possibility
sets:
  - can_check_efile
code: |
  if efile_setup:
    # Ask the user if they want to efile
    can_check_efile = user_wants_efile
  else:
    show_no_efile
    can_check_efile = False
---
only sets:
  - check_resp
code: |
  check_resp = proxy_conn.check_filing(court_id, al_court_bundle)
---
only sets: all_required_screens_shown
id: all required screens shown to user
code: |
  users[0].is_form_filler
  efile_case_category
  efile_case_type
  cross_references.gather()
  show_any_disclaimers
  all_required_screens_shown = True
---
need:
  - efile_author_mode
  - can_check_efile
id: ready_to_efile
code: |
  # Ask for the clerk comments, they'll go in the lead filing doc comments
  if can_check_efile:
    check_resp
    remaining_to_check = check_resp.data
    log('check_resp: ' + str(check_resp))
    if not check_resp.is_ok():
      ready_to_efile = False
      if efile_author_mode:
        show_remaining
      else:
        log(f'Something went wrong: {check_resp.error_msg}')
      
    elif not remaining_to_check.get("required_vars") and not remaining_to_check.get("wrong_vars"):
      ready_to_efile = True
    else:
      if efile_author_mode:
        show_remaining
        follow_up_setup 
        for key in follow_up_vars.keys():
          define(follow_up_vars[key].name, follow_up_vars[key].value)
        ready_to_efile = True
      else:
        ready_to_efile = False
        log(f"Couldn't efile, remaining_to_check: {remaining_to_check}")
        fallback_user_choice
  else:
    ready_to_efile = False
  if not ready_to_efile:
    show_no_efile

  globals().pop('check_resp', None)
---
id: actually efile
depends on:
- can_check_efile
- user_wants_efile
code: |
  if can_check_efile and user_wants_efile and ready_to_efile:
    efile_user_reviewed
    if not efile_author_mode:
      prevent_going_back()
    efile_resp
    show_resp
    # TODO(brycew): This is a bit hacky. Should have a proxy call for enabled features
    if efile_resp.is_ok() and proxy_conn.default_jurisdiction != 'louisiana' and submitted_court_reserve_resp.is_ok():
      show_court_reserve_resp
    efile = True
  else:
    efile = False
---
comment: |
  There are two "operating modes" for the reserve court date API on Tyler's
  side: request a specific hearing date, and request the next available 
  hearing date. TBH, the former isn't super useful as a standalone thing, so
  we're only going to handle, "here are some choices", followed by requesting 
  a specific one.
id: handle court date reserve
code: |
  envelope_id = efile_resp.data['envelopeId']
  have_valid_date = False
  reserve_choice_resp = proxy_conn.reserve_court_date(court_id, envelope_id)
  if not reserve_choice_resp.is_ok() or not reserve_choice_resp.data:
    court_reserve_resp = reserve_choice_resp
    court_reserve_resp.response_code = 500
  else:
    reserve_choices = DAList('reserve_choices')
    for choice in reserve_choice_resp.data:
      reserve_choices.appendObject()
      obj_choice = reserve_choices[-1]
      obj_choice.start = tyler_daterep_to_datetime(choice['scheduleDayStartTime'])
      obj_choice.end = tyler_daterep_to_datetime(choice['scheduleDayEndTime'])
    reserve_choices.gathered = True
    reserve_choices.auto_gather = False
    reserve_choice
    #reserve_choice.start = reserve_choice.start.minus(minutes=1)
    #reserve_choice.end = reserve_choice.end.plus(minutes=3)
    #log(f'Reserve choice.start dt: {reserve_choice.start.format_datetime()}')
    #log(f'Reserve choice.end dt: {reserve_choice.end.format_datetime()}')
    #for choice in reserve_choices:
    court_reserve_resp = proxy_conn.reserve_court_date(court_id, envelope_id, reserve_choice.start, reserve_choice.end, 1) # hardcoded as 1 hr
    log(f'Response from sending court date {choice}: {court_reserve_resp}')
    if court_reserve_resp.is_ok():
      have_valid_date = True
      #break
    else:
      have_valid_date = False
  submitted_court_reserve_resp = court_reserve_resp
---
id: separate efile
code: |
  efile_resp = proxy_conn.file_for_review(court_id, al_court_bundle)
---
id: which-court-date
question: |
  Which court date would you like ?
fields:
  - Which date?: reserve_choice
    datatype: object
    object labeler: |
      lambda y: f'From {y.start.format_datetime()} to {y.end.format_datetime()}'
    choices: |
      reserve_choices
---
id: reserve start date
question: |
  Court Start Time
fields:
  - Do you have a prefered time range: use_range
    datatype: yesno
  - After this Date: reserve_after_date
    datatype: date
    show if: use_range
  - After this Time: reserve_after_time
    datatype: time
    show if: use_range
  - Before this Date: reserve_before_date
    datatype: date
    show if: use_range
  - Before this Time: reserve_before_time
    datatype: time
    show if: use_range
  - How long will it take (in hours)?: reserve_est_duration
    datatype: int
    show if: use_range
---
id: show court reserve
question: |
  % if submitted_court_reserve_resp.is_ok():
  Your request to reserve a court date has been submitted
  % else:
  Sorry, we can't reserve a court hearing date right now
  % endif
subquestion: |

  ${ pretty_display(submitted_court_reserve_resp.data) }
continue button field: show_court_reserve_resp
---
id: missing-field-redo
generic object: DAObject
question: |
  Missing Field: ${ x[i].name }
subquestion: |
  ${ x[i].description }
fields:
  - no label: x[i].value
